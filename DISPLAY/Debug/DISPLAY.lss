
DISPLAY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d4  00800060  00002c72  00002d06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800134  00800134  00002dda  2**0
                  ALLOC
  3 .stab         00002bbc  00000000  00000000  00002ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001308  00000000  00000000  00005998  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008b99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a834  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a994  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ac21  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b3ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 33       	cpi	r26, 0x34	; 52
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e3       	ldi	r26, 0x34	; 52
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 35       	cpi	r26, 0x52	; 82
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 09 	call	0x1346	; 0x1346 <main>
      8a:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e2       	ldi	r26, 0x20	; 32
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d7 15 	jmp	0x2bae	; 0x2bae <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c7 15 	jmp	0x2b8e	; 0x2b8e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e3 15 	jmp	0x2bc6	; 0x2bc6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c7 15 	jmp	0x2b8e	; 0x2b8e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e3 15 	jmp	0x2bc6	; 0x2bc6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e2       	ldi	r24, 0x20	; 32
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d7 15 	jmp	0x2bae	; 0x2bae <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c7 15 	jmp	0x2b8e	; 0x2b8e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e3 15 	jmp	0x2bc6	; 0x2bc6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c7 15 	jmp	0x2b8e	; 0x2b8e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e3 15 	jmp	0x2bc6	; 0x2bc6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c7 15 	jmp	0x2b8e	; 0x2b8e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e3 15 	jmp	0x2bc6	; 0x2bc6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 cb 15 	jmp	0x2b96	; 0x2b96 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <enterpassword>:
 * wait for '=' character to terminate function
 * returns:void
 *
 */
void enterpassword(uint8 aarr[])
{  uint8 l_key;
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	62 97       	sbiw	r28, 0x12	; 18
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9a 8b       	std	Y+18, r25	; 0x12
     b5c:	89 8b       	std	Y+17, r24	; 0x11
	uint8 l_counter=0;
     b5e:	1f 86       	std	Y+15, r1	; 0x0f
LCD_moveCursor(1,0);
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	0e 94 46 12 	call	0x248c	; 0x248c <LCD_moveCursor>
	for(l_counter=0;l_counter<NUMBER_CHAR;l_counter++)
     b68:	1f 86       	std	Y+15, r1	; 0x0f
     b6a:	85 c0       	rjmp	.+266    	; 0xc76 <enterpassword+0x130>
	{
		l_key=KEYPAD_getPressedKey();
     b6c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <KEYPAD_getPressedKey>
     b70:	88 8b       	std	Y+16, r24	; 0x10
		aarr[l_counter]=l_key;
     b72:	8f 85       	ldd	r24, Y+15	; 0x0f
     b74:	28 2f       	mov	r18, r24
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	89 89       	ldd	r24, Y+17	; 0x11
     b7a:	9a 89       	ldd	r25, Y+18	; 0x12
     b7c:	fc 01       	movw	r30, r24
     b7e:	e2 0f       	add	r30, r18
     b80:	f3 1f       	adc	r31, r19
     b82:	88 89       	ldd	r24, Y+16	; 0x10
     b84:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
     b86:	8a e2       	ldi	r24, 0x2A	; 42
     b88:	0e 94 28 10 	call	0x2050	; 0x2050 <LCD_displayCharacter>
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	aa ef       	ldi	r26, 0xFA	; 250
     b92:	b3 e4       	ldi	r27, 0x43	; 67
     b94:	8b 87       	std	Y+11, r24	; 0x0b
     b96:	9c 87       	std	Y+12, r25	; 0x0c
     b98:	ad 87       	std	Y+13, r26	; 0x0d
     b9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b9c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b9e:	7c 85       	ldd	r23, Y+12	; 0x0c
     ba0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ba2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	4a ef       	ldi	r20, 0xFA	; 250
     baa:	54 e4       	ldi	r21, 0x44	; 68
     bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bb0:	dc 01       	movw	r26, r24
     bb2:	cb 01       	movw	r24, r22
     bb4:	8f 83       	std	Y+7, r24	; 0x07
     bb6:	98 87       	std	Y+8, r25	; 0x08
     bb8:	a9 87       	std	Y+9, r26	; 0x09
     bba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bbc:	6f 81       	ldd	r22, Y+7	; 0x07
     bbe:	78 85       	ldd	r23, Y+8	; 0x08
     bc0:	89 85       	ldd	r24, Y+9	; 0x09
     bc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e8       	ldi	r20, 0x80	; 128
     bca:	5f e3       	ldi	r21, 0x3F	; 63
     bcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bd0:	88 23       	and	r24, r24
     bd2:	2c f4       	brge	.+10     	; 0xbde <enterpassword+0x98>
		__ticks = 1;
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	9e 83       	std	Y+6, r25	; 0x06
     bda:	8d 83       	std	Y+5, r24	; 0x05
     bdc:	3f c0       	rjmp	.+126    	; 0xc5c <enterpassword+0x116>
	else if (__tmp > 65535)
     bde:	6f 81       	ldd	r22, Y+7	; 0x07
     be0:	78 85       	ldd	r23, Y+8	; 0x08
     be2:	89 85       	ldd	r24, Y+9	; 0x09
     be4:	9a 85       	ldd	r25, Y+10	; 0x0a
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	3f ef       	ldi	r19, 0xFF	; 255
     bea:	4f e7       	ldi	r20, 0x7F	; 127
     bec:	57 e4       	ldi	r21, 0x47	; 71
     bee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bf2:	18 16       	cp	r1, r24
     bf4:	4c f5       	brge	.+82     	; 0xc48 <enterpassword+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf6:	6b 85       	ldd	r22, Y+11	; 0x0b
     bf8:	7c 85       	ldd	r23, Y+12	; 0x0c
     bfa:	8d 85       	ldd	r24, Y+13	; 0x0d
     bfc:	9e 85       	ldd	r25, Y+14	; 0x0e
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	40 e2       	ldi	r20, 0x20	; 32
     c04:	51 e4       	ldi	r21, 0x41	; 65
     c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c0a:	dc 01       	movw	r26, r24
     c0c:	cb 01       	movw	r24, r22
     c0e:	bc 01       	movw	r22, r24
     c10:	cd 01       	movw	r24, r26
     c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c16:	dc 01       	movw	r26, r24
     c18:	cb 01       	movw	r24, r22
     c1a:	9e 83       	std	Y+6, r25	; 0x06
     c1c:	8d 83       	std	Y+5, r24	; 0x05
     c1e:	0f c0       	rjmp	.+30     	; 0xc3e <enterpassword+0xf8>
     c20:	88 ec       	ldi	r24, 0xC8	; 200
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	9c 83       	std	Y+4, r25	; 0x04
     c26:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c28:	8b 81       	ldd	r24, Y+3	; 0x03
     c2a:	9c 81       	ldd	r25, Y+4	; 0x04
     c2c:	01 97       	sbiw	r24, 0x01	; 1
     c2e:	f1 f7       	brne	.-4      	; 0xc2c <enterpassword+0xe6>
     c30:	9c 83       	std	Y+4, r25	; 0x04
     c32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	01 97       	sbiw	r24, 0x01	; 1
     c3a:	9e 83       	std	Y+6, r25	; 0x06
     c3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c3e:	8d 81       	ldd	r24, Y+5	; 0x05
     c40:	9e 81       	ldd	r25, Y+6	; 0x06
     c42:	00 97       	sbiw	r24, 0x00	; 0
     c44:	69 f7       	brne	.-38     	; 0xc20 <enterpassword+0xda>
     c46:	14 c0       	rjmp	.+40     	; 0xc70 <enterpassword+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c48:	6f 81       	ldd	r22, Y+7	; 0x07
     c4a:	78 85       	ldd	r23, Y+8	; 0x08
     c4c:	89 85       	ldd	r24, Y+9	; 0x09
     c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c54:	dc 01       	movw	r26, r24
     c56:	cb 01       	movw	r24, r22
     c58:	9e 83       	std	Y+6, r25	; 0x06
     c5a:	8d 83       	std	Y+5, r24	; 0x05
     c5c:	8d 81       	ldd	r24, Y+5	; 0x05
     c5e:	9e 81       	ldd	r25, Y+6	; 0x06
     c60:	9a 83       	std	Y+2, r25	; 0x02
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	9a 81       	ldd	r25, Y+2	; 0x02
     c68:	01 97       	sbiw	r24, 0x01	; 1
     c6a:	f1 f7       	brne	.-4      	; 0xc68 <enterpassword+0x122>
     c6c:	9a 83       	std	Y+2, r25	; 0x02
     c6e:	89 83       	std	Y+1, r24	; 0x01
 */
void enterpassword(uint8 aarr[])
{  uint8 l_key;
	uint8 l_counter=0;
LCD_moveCursor(1,0);
	for(l_counter=0;l_counter<NUMBER_CHAR;l_counter++)
     c70:	8f 85       	ldd	r24, Y+15	; 0x0f
     c72:	8f 5f       	subi	r24, 0xFF	; 255
     c74:	8f 87       	std	Y+15, r24	; 0x0f
     c76:	8f 85       	ldd	r24, Y+15	; 0x0f
     c78:	85 30       	cpi	r24, 0x05	; 5
     c7a:	08 f4       	brcc	.+2      	; 0xc7e <enterpassword+0x138>
     c7c:	77 cf       	rjmp	.-274    	; 0xb6c <enterpassword+0x26>
     c7e:	03 c0       	rjmp	.+6      	; 0xc86 <enterpassword+0x140>
		_delay_ms(500);
	}

	while(l_key!='=')
	{
		l_key=KEYPAD_getPressedKey();
     c80:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <KEYPAD_getPressedKey>
     c84:	88 8b       	std	Y+16, r24	; 0x10
		aarr[l_counter]=l_key;
		LCD_displayCharacter('*');
		_delay_ms(500);
	}

	while(l_key!='=')
     c86:	88 89       	ldd	r24, Y+16	; 0x10
     c88:	8d 33       	cpi	r24, 0x3D	; 61
     c8a:	d1 f7       	brne	.-12     	; 0xc80 <enterpassword+0x13a>
	{
		l_key=KEYPAD_getPressedKey();
	}

}
     c8c:	62 96       	adiw	r28, 0x12	; 18
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	f8 94       	cli
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	cd bf       	out	0x3d, r28	; 61
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	08 95       	ret

00000c9e <wrongscreen>:
 * arguments: none
 * returns:void
 *
 */
void wrongscreen()
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	2e 97       	sbiw	r28, 0x0e	; 14
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
     cb2:	0e 94 c4 12 	call	0x2588	; 0x2588 <LCD_clearScreen>
	LCD_displayString("NOT MATCHED!");
     cb6:	80 e6       	ldi	r24, 0x60	; 96
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 1d 12 	call	0x243a	; 0x243a <LCD_displayString>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	aa ef       	ldi	r26, 0xFA	; 250
     cc4:	b4 e4       	ldi	r27, 0x44	; 68
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	ad 87       	std	Y+13, r26	; 0x0d
     ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a ef       	ldi	r20, 0xFA	; 250
     cdc:	54 e4       	ldi	r21, 0x44	; 68
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <wrongscreen+0x72>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <wrongscreen+0xf0>
	else if (__tmp > 65535)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <wrongscreen+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <wrongscreen+0xd2>
     d52:	88 ec       	ldi	r24, 0xC8	; 200
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <wrongscreen+0xc0>
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <wrongscreen+0xb4>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <wrongscreen+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <wrongscreen+0xfc>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
}
     da2:	2e 96       	adiw	r28, 0x0e	; 14
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <sendpassword>:
 * arguments: password to be sent
 * we use UART driver to send password byte by byte
 * returns : void
 */
void sendpassword(uint8 a_arr[])
{
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	00 d0       	rcall	.+0      	; 0xdba <sendpassword+0x6>
     dba:	0f 92       	push	r0
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
     dc0:	9b 83       	std	Y+3, r25	; 0x03
     dc2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for( i=0;i<NUMBER_CHAR;i++)
     dc4:	19 82       	std	Y+1, r1	; 0x01
     dc6:	0e c0       	rjmp	.+28     	; 0xde4 <sendpassword+0x30>
	{
		UART_sendByte(a_arr[i]);
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	9b 81       	ldd	r25, Y+3	; 0x03
     dd2:	fc 01       	movw	r30, r24
     dd4:	e2 0f       	add	r30, r18
     dd6:	f3 1f       	adc	r31, r19
     dd8:	80 81       	ld	r24, Z
     dda:	0e 94 89 14 	call	0x2912	; 0x2912 <UART_sendByte>
 * returns : void
 */
void sendpassword(uint8 a_arr[])
{
	uint8 i;
	for( i=0;i<NUMBER_CHAR;i++)
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	8f 5f       	subi	r24, 0xFF	; 255
     de2:	89 83       	std	Y+1, r24	; 0x01
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	85 30       	cpi	r24, 0x05	; 5
     de8:	78 f3       	brcs	.-34     	; 0xdc8 <sendpassword+0x14>
	{
		UART_sendByte(a_arr[i]);
	}
}
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <firsttimepass>:
 * start again and increment error counter
 * and if error counter is equal to 3 we call alert function
 * returns: void
 */
void firsttimepass(uint8 aarr[])
{
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <firsttimepass+0x6>
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	9a 83       	std	Y+2, r25	; 0x02
     e02:	89 83       	std	Y+1, r24	; 0x01
	g_checknew=1;
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	80 93 33 01 	sts	0x0133, r24
	LCD_clearScreen();
     e0a:	0e 94 c4 12 	call	0x2588	; 0x2588 <LCD_clearScreen>
	LCD_displayString("ENTER NEW PASS:");
     e0e:	8d e6       	ldi	r24, 0x6D	; 109
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 1d 12 	call	0x243a	; 0x243a <LCD_displayString>
enterpassword(newwpassword);
     e16:	8c e4       	ldi	r24, 0x4C	; 76
     e18:	91 e0       	ldi	r25, 0x01	; 1
     e1a:	0e 94 a3 05 	call	0xb46	; 0xb46 <enterpassword>
LCD_clearScreen();
     e1e:	0e 94 c4 12 	call	0x2588	; 0x2588 <LCD_clearScreen>
		LCD_displayString("LOADING WAIT ");
     e22:	8d e7       	ldi	r24, 0x7D	; 125
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 1d 12 	call	0x243a	; 0x243a <LCD_displayString>
UART_sendByte(START);
     e2a:	83 e5       	ldi	r24, 0x53	; 83
     e2c:	0e 94 89 14 	call	0x2912	; 0x2912 <UART_sendByte>
while(UART_recieveByte()!=START){};
     e30:	0e 94 a0 14 	call	0x2940	; 0x2940 <UART_recieveByte>
     e34:	83 35       	cpi	r24, 0x53	; 83
     e36:	e1 f7       	brne	.-8      	; 0xe30 <firsttimepass+0x3a>
UART_sendByte(storepassword);
     e38:	83 e7       	ldi	r24, 0x73	; 115
     e3a:	0e 94 89 14 	call	0x2912	; 0x2912 <UART_sendByte>
sendpassword(newwpassword);
     e3e:	8c e4       	ldi	r24, 0x4C	; 76
     e40:	91 e0       	ldi	r25, 0x01	; 1
     e42:	0e 94 da 06 	call	0xdb4	; 0xdb4 <sendpassword>
LCD_clearScreen();
     e46:	0e 94 c4 12 	call	0x2588	; 0x2588 <LCD_clearScreen>
LCD_displayString("CONFIRM NEW PASS:");
     e4a:	8b e8       	ldi	r24, 0x8B	; 139
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 1d 12 	call	0x243a	; 0x243a <LCD_displayString>
enterpassword(reepassword);
     e52:	87 e4       	ldi	r24, 0x47	; 71
     e54:	91 e0       	ldi	r25, 0x01	; 1
     e56:	0e 94 a3 05 	call	0xb46	; 0xb46 <enterpassword>
LCD_clearScreen();
     e5a:	0e 94 c4 12 	call	0x2588	; 0x2588 <LCD_clearScreen>
		LCD_displayString("LOADING WAIT ");
     e5e:	8d e7       	ldi	r24, 0x7D	; 125
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 1d 12 	call	0x243a	; 0x243a <LCD_displayString>
UART_sendByte(START);
     e66:	83 e5       	ldi	r24, 0x53	; 83
     e68:	0e 94 89 14 	call	0x2912	; 0x2912 <UART_sendByte>
while(UART_recieveByte()!=START){};
     e6c:	0e 94 a0 14 	call	0x2940	; 0x2940 <UART_recieveByte>
     e70:	83 35       	cpi	r24, 0x53	; 83
     e72:	e1 f7       	brne	.-8      	; 0xe6c <firsttimepass+0x76>
UART_sendByte(checkpassword);
     e74:	83 e6       	ldi	r24, 0x63	; 99
     e76:	0e 94 89 14 	call	0x2912	; 0x2912 <UART_sendByte>
sendpassword(reepassword);
     e7a:	87 e4       	ldi	r24, 0x47	; 71
     e7c:	91 e0       	ldi	r25, 0x01	; 1
     e7e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <sendpassword>
g_compareresult1=UART_recieveByte();
     e82:	0e 94 a0 14 	call	0x2940	; 0x2940 <UART_recieveByte>
     e86:	80 93 51 01 	sts	0x0151, r24
if(g_compareresult1==TRUE)
     e8a:	80 91 51 01 	lds	r24, 0x0151
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	29 f4       	brne	.+10     	; 0xe9c <firsttimepass+0xa6>
{
	g_checknew=0;
     e92:	10 92 33 01 	sts	0x0133, r1
	g_errornew=0;
     e96:	10 92 34 01 	sts	0x0134, r1
     e9a:	0d c0       	rjmp	.+26     	; 0xeb6 <firsttimepass+0xc0>
}
else
{
	wrongscreen();
     e9c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <wrongscreen>
	g_errornew++;
     ea0:	80 91 34 01 	lds	r24, 0x0134
     ea4:	8f 5f       	subi	r24, 0xFF	; 255
     ea6:	80 93 34 01 	sts	0x0134, r24
	if(g_errornew==3)
     eaa:	80 91 34 01 	lds	r24, 0x0134
     eae:	83 30       	cpi	r24, 0x03	; 3
     eb0:	11 f4       	brne	.+4      	; 0xeb6 <firsttimepass+0xc0>
	{
		alertscreen();
     eb2:	0e 94 16 08 	call	0x102c	; 0x102c <alertscreen>
	}
}
}
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <changepassword>:
 * and if error counter is equal to 3 we call alert function
 * returns: void
 */

void changepassword()
{
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     ec8:	0e 94 c4 12 	call	0x2588	; 0x2588 <LCD_clearScreen>
	LCD_displayString("OLD PASS IS:");
     ecc:	8d e9       	ldi	r24, 0x9D	; 157
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 1d 12 	call	0x243a	; 0x243a <LCD_displayString>
enterpassword(origgpassword);
     ed4:	80 e4       	ldi	r24, 0x40	; 64
     ed6:	91 e0       	ldi	r25, 0x01	; 1
     ed8:	0e 94 a3 05 	call	0xb46	; 0xb46 <enterpassword>
LCD_clearScreen();
     edc:	0e 94 c4 12 	call	0x2588	; 0x2588 <LCD_clearScreen>
		LCD_displayString("LOADING WAIT ");
     ee0:	8d e7       	ldi	r24, 0x7D	; 125
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 1d 12 	call	0x243a	; 0x243a <LCD_displayString>
UART_sendByte(START);
     ee8:	83 e5       	ldi	r24, 0x53	; 83
     eea:	0e 94 89 14 	call	0x2912	; 0x2912 <UART_sendByte>
while(UART_recieveByte()!=START){};
     eee:	0e 94 a0 14 	call	0x2940	; 0x2940 <UART_recieveByte>
     ef2:	83 35       	cpi	r24, 0x53	; 83
     ef4:	e1 f7       	brne	.-8      	; 0xeee <changepassword+0x2e>
UART_sendByte(trialpassword);
     ef6:	84 e7       	ldi	r24, 0x74	; 116
     ef8:	0e 94 89 14 	call	0x2912	; 0x2912 <UART_sendByte>
sendpassword(origgpassword);
     efc:	80 e4       	ldi	r24, 0x40	; 64
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	0e 94 da 06 	call	0xdb4	; 0xdb4 <sendpassword>
g_compareresult2=UART_recieveByte();
     f04:	0e 94 a0 14 	call	0x2940	; 0x2940 <UART_recieveByte>
     f08:	80 93 46 01 	sts	0x0146, r24
if(g_compareresult2==TRUE)
     f0c:	80 91 46 01 	lds	r24, 0x0146
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	29 f4       	brne	.+10     	; 0xf1e <changepassword+0x5e>
{
	firsttimepass(origgpassword);
     f14:	80 e4       	ldi	r24, 0x40	; 64
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <firsttimepass>
     f1c:	0d c0       	rjmp	.+26     	; 0xf38 <changepassword+0x78>
}
else
{
	wrongscreen();
     f1e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <wrongscreen>
	g_errorconfirm++;
     f22:	80 91 35 01 	lds	r24, 0x0135
     f26:	8f 5f       	subi	r24, 0xFF	; 255
     f28:	80 93 35 01 	sts	0x0135, r24
	if(g_errorconfirm==3)
     f2c:	80 91 35 01 	lds	r24, 0x0135
     f30:	83 30       	cpi	r24, 0x03	; 3
     f32:	11 f4       	brne	.+4      	; 0xf38 <changepassword+0x78>
	{
		alertscreen();
     f34:	0e 94 16 08 	call	0x102c	; 0x102c <alertscreen>
	}
}
}
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <alarmdelay>:
 * arguments: none
 * variables: tick1 to count for timer
 * return : void
 */
void alarmdelay()
{
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
	g_tick1++;
     f46:	80 91 36 01 	lds	r24, 0x0136
     f4a:	90 91 37 01 	lds	r25, 0x0137
     f4e:	01 96       	adiw	r24, 0x01	; 1
     f50:	90 93 37 01 	sts	0x0137, r25
     f54:	80 93 36 01 	sts	0x0136, r24
	if(g_tick1 == TIMER_TICKS_1MINUTE+3)
     f58:	80 91 36 01 	lds	r24, 0x0136
     f5c:	90 91 37 01 	lds	r25, 0x0137
     f60:	27 e0       	ldi	r18, 0x07	; 7
     f62:	87 32       	cpi	r24, 0x27	; 39
     f64:	92 07       	cpc	r25, r18
     f66:	31 f4       	brne	.+12     	; 0xf74 <alarmdelay+0x36>
		{
			TIMER0_deInit();
     f68:	0e 94 df 13 	call	0x27be	; 0x27be <TIMER0_deInit>
			g_tick1=0;
     f6c:	10 92 37 01 	sts	0x0137, r1
     f70:	10 92 36 01 	sts	0x0136, r1
		}

}
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <countermotoropen>:
 * arguments: none
 * variables: tick2open to count for timer
 * return : void
 */
void countermotoropen()
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
	g_tick2open++;
     f82:	80 91 38 01 	lds	r24, 0x0138
     f86:	90 91 39 01 	lds	r25, 0x0139
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	90 93 39 01 	sts	0x0139, r25
     f90:	80 93 38 01 	sts	0x0138, r24

	if(g_tick2open==TIMER_TICKS_15SEC+3)
     f94:	80 91 38 01 	lds	r24, 0x0138
     f98:	90 91 39 01 	lds	r25, 0x0139
     f9c:	21 e0       	ldi	r18, 0x01	; 1
     f9e:	89 3c       	cpi	r24, 0xC9	; 201
     fa0:	92 07       	cpc	r25, r18
     fa2:	31 f4       	brne	.+12     	; 0xfb0 <countermotoropen+0x36>
	{

		TIMER0_deInit();
     fa4:	0e 94 df 13 	call	0x27be	; 0x27be <TIMER0_deInit>
		g_tick2open=0;
     fa8:	10 92 39 01 	sts	0x0139, r1
     fac:	10 92 38 01 	sts	0x0138, r1
	}
}
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <countermotorclose>:
 * arguments: none
 * variables: tick2close to count for timer
 * return : void
 */
void countermotorclose()
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
	g_tick2close++;
     fbe:	80 91 3a 01 	lds	r24, 0x013A
     fc2:	90 91 3b 01 	lds	r25, 0x013B
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	90 93 3b 01 	sts	0x013B, r25
     fcc:	80 93 3a 01 	sts	0x013A, r24

	if(g_tick2close==TIMER_TICKS_15SEC+3)
     fd0:	80 91 3a 01 	lds	r24, 0x013A
     fd4:	90 91 3b 01 	lds	r25, 0x013B
     fd8:	21 e0       	ldi	r18, 0x01	; 1
     fda:	89 3c       	cpi	r24, 0xC9	; 201
     fdc:	92 07       	cpc	r25, r18
     fde:	31 f4       	brne	.+12     	; 0xfec <countermotorclose+0x36>
	{

		TIMER0_deInit();
     fe0:	0e 94 df 13 	call	0x27be	; 0x27be <TIMER0_deInit>
		g_tick2close=0;
     fe4:	10 92 3b 01 	sts	0x013B, r1
     fe8:	10 92 3a 01 	sts	0x013A, r1
	}
}
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <counter3sec>:
 * arguments: none
 * variables: tick3to count for timer
 * return : void
 */
void counter3sec()
{
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
	g_tick3++;
     ffa:	80 91 3c 01 	lds	r24, 0x013C
     ffe:	90 91 3d 01 	lds	r25, 0x013D
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	90 93 3d 01 	sts	0x013D, r25
    1008:	80 93 3c 01 	sts	0x013C, r24

	if(g_tick3==TIMER_TICKS_3SEC+3)
    100c:	80 91 3c 01 	lds	r24, 0x013C
    1010:	90 91 3d 01 	lds	r25, 0x013D
    1014:	8a 35       	cpi	r24, 0x5A	; 90
    1016:	91 05       	cpc	r25, r1
    1018:	31 f4       	brne	.+12     	; 0x1026 <counter3sec+0x34>
	{

		TIMER0_deInit();
    101a:	0e 94 df 13 	call	0x27be	; 0x27be <TIMER0_deInit>
		g_tick3=0;
    101e:	10 92 3d 01 	sts	0x013D, r1
    1022:	10 92 3c 01 	sts	0x013C, r1
	}
}
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <alertscreen>:
 * display warning message for thief on screen
 * after finishing 1 minute clear all error counters
 * returns : void
 */
void alertscreen()
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
	g_tick1=0;
    1034:	10 92 37 01 	sts	0x0137, r1
    1038:	10 92 36 01 	sts	0x0136, r1
	UART_sendByte(START);
    103c:	83 e5       	ldi	r24, 0x53	; 83
    103e:	0e 94 89 14 	call	0x2912	; 0x2912 <UART_sendByte>
while(UART_recieveByte()!=START){};
    1042:	0e 94 a0 14 	call	0x2940	; 0x2940 <UART_recieveByte>
    1046:	83 35       	cpi	r24, 0x53	; 83
    1048:	e1 f7       	brne	.-8      	; 0x1042 <alertscreen+0x16>
	UART_sendByte(errormessage);
    104a:	85 e6       	ldi	r24, 0x65	; 101
    104c:	0e 94 89 14 	call	0x2912	; 0x2912 <UART_sendByte>
	LCD_clearScreen();
    1050:	0e 94 c4 12 	call	0x2588	; 0x2588 <LCD_clearScreen>
	TIMER0_setCallBack(alarmdelay);
    1054:	8f e9       	ldi	r24, 0x9F	; 159
    1056:	97 e0       	ldi	r25, 0x07	; 7
    1058:	0e 94 cd 13 	call	0x279a	; 0x279a <TIMER0_setCallBack>
	TIMER0_init(&TIMERconfig);
    105c:	8f e2       	ldi	r24, 0x2F	; 47
    105e:	91 e0       	ldi	r25, 0x01	; 1
    1060:	0e 94 34 13 	call	0x2668	; 0x2668 <TIMER0_init>
		LCD_moveCursor(0,0);
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	0e 94 46 12 	call	0x248c	; 0x248c <LCD_moveCursor>
				LCD_displayString("HELLO THIEF");
    106c:	8a ea       	ldi	r24, 0xAA	; 170
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 1d 12 	call	0x243a	; 0x243a <LCD_displayString>
	while(g_tick1 <= TIMER_TICKS_1MINUTE){};
    1074:	80 91 36 01 	lds	r24, 0x0136
    1078:	90 91 37 01 	lds	r25, 0x0137
    107c:	27 e0       	ldi	r18, 0x07	; 7
    107e:	85 32       	cpi	r24, 0x25	; 37
    1080:	92 07       	cpc	r25, r18
    1082:	c0 f3       	brcs	.-16     	; 0x1074 <alertscreen+0x48>
	g_errornew=0;
    1084:	10 92 34 01 	sts	0x0134, r1
	g_errorconfirm=0;
    1088:	10 92 35 01 	sts	0x0135, r1


}
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <openndoor>:
 * using timer we count 15second and display that door is closing
 * if result is false increment error counter and continue to main options
 * and if error counter is equal to 3 we call alert function
 * */
void openndoor()
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    109a:	0e 94 c4 12 	call	0x2588	; 0x2588 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"OLD PASS is");
    109e:	26 eb       	ldi	r18, 0xB6	; 182
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	a9 01       	movw	r20, r18
    10a8:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_displayStringRowColumn>
		enterpassword(origgpassword);
    10ac:	80 e4       	ldi	r24, 0x40	; 64
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	0e 94 a3 05 	call	0xb46	; 0xb46 <enterpassword>
		LCD_clearScreen();
    10b4:	0e 94 c4 12 	call	0x2588	; 0x2588 <LCD_clearScreen>
		LCD_displayString("LOADING WAIT ");
    10b8:	8d e7       	ldi	r24, 0x7D	; 125
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 1d 12 	call	0x243a	; 0x243a <LCD_displayString>
		UART_sendByte(START);
    10c0:	83 e5       	ldi	r24, 0x53	; 83
    10c2:	0e 94 89 14 	call	0x2912	; 0x2912 <UART_sendByte>
		while(UART_recieveByte()!=START){};
    10c6:	0e 94 a0 14 	call	0x2940	; 0x2940 <UART_recieveByte>
    10ca:	83 35       	cpi	r24, 0x53	; 83
    10cc:	e1 f7       	brne	.-8      	; 0x10c6 <openndoor+0x34>
		UART_sendByte(checkpassword);
    10ce:	83 e6       	ldi	r24, 0x63	; 99
    10d0:	0e 94 89 14 	call	0x2912	; 0x2912 <UART_sendByte>
		sendpassword(origgpassword);
    10d4:	80 e4       	ldi	r24, 0x40	; 64
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	0e 94 da 06 	call	0xdb4	; 0xdb4 <sendpassword>
		g_compareresult1=UART_recieveByte();
    10dc:	0e 94 a0 14 	call	0x2940	; 0x2940 <UART_recieveByte>
    10e0:	80 93 51 01 	sts	0x0151, r24

	if(g_compareresult1==TRUE)
    10e4:	80 91 51 01 	lds	r24, 0x0151
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	09 f0       	breq	.+2      	; 0x10ee <openndoor+0x5c>
    10ec:	6a c0       	rjmp	.+212    	; 0x11c2 <openndoor+0x130>
	{
		g_tick1=0,g_tick2open=0,g_tick2close=0,g_tick3=0;
    10ee:	10 92 37 01 	sts	0x0137, r1
    10f2:	10 92 36 01 	sts	0x0136, r1
    10f6:	10 92 39 01 	sts	0x0139, r1
    10fa:	10 92 38 01 	sts	0x0138, r1
    10fe:	10 92 3b 01 	sts	0x013B, r1
    1102:	10 92 3a 01 	sts	0x013A, r1
    1106:	10 92 3d 01 	sts	0x013D, r1
    110a:	10 92 3c 01 	sts	0x013C, r1
		g_errorconfirm=0;
    110e:	10 92 35 01 	sts	0x0135, r1
		UART_sendByte(START);
    1112:	83 e5       	ldi	r24, 0x53	; 83
    1114:	0e 94 89 14 	call	0x2912	; 0x2912 <UART_sendByte>
			while(UART_recieveByte()!=START){};
    1118:	0e 94 a0 14 	call	0x2940	; 0x2940 <UART_recieveByte>
    111c:	83 35       	cpi	r24, 0x53	; 83
    111e:	e1 f7       	brne	.-8      	; 0x1118 <openndoor+0x86>
		UART_sendByte(openmotor);
    1120:	8b e2       	ldi	r24, 0x2B	; 43
    1122:	0e 94 89 14 	call	0x2912	; 0x2912 <UART_sendByte>
		LCD_clearScreen();
    1126:	0e 94 c4 12 	call	0x2588	; 0x2588 <LCD_clearScreen>
		TIMER0_setCallBack(countermotoropen);
    112a:	8d eb       	ldi	r24, 0xBD	; 189
    112c:	97 e0       	ldi	r25, 0x07	; 7
    112e:	0e 94 cd 13 	call	0x279a	; 0x279a <TIMER0_setCallBack>
		TIMER0_init(&TIMERconfig);
    1132:	8f e2       	ldi	r24, 0x2F	; 47
    1134:	91 e0       	ldi	r25, 0x01	; 1
    1136:	0e 94 34 13 	call	0x2668	; 0x2668 <TIMER0_init>
		LCD_displayStringRowColumn(0,0,"OPENING DOOR");
    113a:	22 ec       	ldi	r18, 0xC2	; 194
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	a9 01       	movw	r20, r18
    1144:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_displayStringRowColumn>
		while(g_tick2open <= TIMER_TICKS_15SEC){};
    1148:	80 91 38 01 	lds	r24, 0x0138
    114c:	90 91 39 01 	lds	r25, 0x0139
    1150:	21 e0       	ldi	r18, 0x01	; 1
    1152:	87 3c       	cpi	r24, 0xC7	; 199
    1154:	92 07       	cpc	r25, r18
    1156:	c0 f3       	brcs	.-16     	; 0x1148 <openndoor+0xb6>
		LCD_clearScreen();
    1158:	0e 94 c4 12 	call	0x2588	; 0x2588 <LCD_clearScreen>
				TIMER0_setCallBack(counter3sec);
    115c:	89 ef       	ldi	r24, 0xF9	; 249
    115e:	97 e0       	ldi	r25, 0x07	; 7
    1160:	0e 94 cd 13 	call	0x279a	; 0x279a <TIMER0_setCallBack>
				TIMER0_init(&TIMERconfig);
    1164:	8f e2       	ldi	r24, 0x2F	; 47
    1166:	91 e0       	ldi	r25, 0x01	; 1
    1168:	0e 94 34 13 	call	0x2668	; 0x2668 <TIMER0_init>
	LCD_displayString("Door is open");
    116c:	8f ec       	ldi	r24, 0xCF	; 207
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 1d 12 	call	0x243a	; 0x243a <LCD_displayString>
	while(g_tick3 <= TIMER_TICKS_3SEC){};
    1174:	80 91 3c 01 	lds	r24, 0x013C
    1178:	90 91 3d 01 	lds	r25, 0x013D
    117c:	88 35       	cpi	r24, 0x58	; 88
    117e:	91 05       	cpc	r25, r1
    1180:	c8 f3       	brcs	.-14     	; 0x1174 <openndoor+0xe2>
	LCD_clearScreen();
    1182:	0e 94 c4 12 	call	0x2588	; 0x2588 <LCD_clearScreen>
	TIMER0_setCallBack(countermotorclose);
    1186:	8b ed       	ldi	r24, 0xDB	; 219
    1188:	97 e0       	ldi	r25, 0x07	; 7
    118a:	0e 94 cd 13 	call	0x279a	; 0x279a <TIMER0_setCallBack>
	TIMER0_init(&TIMERconfig);
    118e:	8f e2       	ldi	r24, 0x2F	; 47
    1190:	91 e0       	ldi	r25, 0x01	; 1
    1192:	0e 94 34 13 	call	0x2668	; 0x2668 <TIMER0_init>
	LCD_displayStringRowColumn(0,0,"CLOSING DOOR");
    1196:	2c ed       	ldi	r18, 0xDC	; 220
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	a9 01       	movw	r20, r18
    11a0:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_displayStringRowColumn>
	while(g_tick2close <= TIMER_TICKS_15SEC){};
    11a4:	80 91 3a 01 	lds	r24, 0x013A
    11a8:	90 91 3b 01 	lds	r25, 0x013B
    11ac:	21 e0       	ldi	r18, 0x01	; 1
    11ae:	87 3c       	cpi	r24, 0xC7	; 199
    11b0:	92 07       	cpc	r25, r18
    11b2:	c0 f3       	brcs	.-16     	; 0x11a4 <openndoor+0x112>
	LCD_clearScreen();
    11b4:	0e 94 c4 12 	call	0x2588	; 0x2588 <LCD_clearScreen>
		LCD_displayString("LOADING WAIT ");
    11b8:	8d e7       	ldi	r24, 0x7D	; 125
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0e 94 1d 12 	call	0x243a	; 0x243a <LCD_displayString>
    11c0:	0d c0       	rjmp	.+26     	; 0x11dc <openndoor+0x14a>
	}
	else
	{ g_errorconfirm++;
    11c2:	80 91 35 01 	lds	r24, 0x0135
    11c6:	8f 5f       	subi	r24, 0xFF	; 255
    11c8:	80 93 35 01 	sts	0x0135, r24
	wrongscreen();
    11cc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <wrongscreen>
				if(g_errorconfirm==3)
    11d0:	80 91 35 01 	lds	r24, 0x0135
    11d4:	83 30       	cpi	r24, 0x03	; 3
    11d6:	11 f4       	brne	.+4      	; 0x11dc <openndoor+0x14a>
				{
					alertscreen();
    11d8:	0e 94 16 08 	call	0x102c	; 0x102c <alertscreen>
				}

	}
}
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <Mainoption>:
 * then send them desired option
 * and start here desired option
 * return void
 */
void Mainoption()
{
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	60 97       	sbiw	r28, 0x10	; 16
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	de bf       	out	0x3e, r29	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    11f6:	0e 94 c4 12 	call	0x2588	; 0x2588 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"+:Open door");
    11fa:	29 ee       	ldi	r18, 0xE9	; 233
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	a9 01       	movw	r20, r18
    1204:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"-:Change pass");
    1208:	25 ef       	ldi	r18, 0xF5	; 245
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	a9 01       	movw	r20, r18
    1212:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_displayStringRowColumn>
	g_pressedkey=KEYPAD_getPressedKey();
    1216:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <KEYPAD_getPressedKey>
    121a:	80 93 45 01 	sts	0x0145, r24
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	aa ef       	ldi	r26, 0xFA	; 250
    1224:	b3 e4       	ldi	r27, 0x43	; 67
    1226:	8b 87       	std	Y+11, r24	; 0x0b
    1228:	9c 87       	std	Y+12, r25	; 0x0c
    122a:	ad 87       	std	Y+13, r26	; 0x0d
    122c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    122e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1230:	7c 85       	ldd	r23, Y+12	; 0x0c
    1232:	8d 85       	ldd	r24, Y+13	; 0x0d
    1234:	9e 85       	ldd	r25, Y+14	; 0x0e
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	4a ef       	ldi	r20, 0xFA	; 250
    123c:	54 e4       	ldi	r21, 0x44	; 68
    123e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	8f 83       	std	Y+7, r24	; 0x07
    1248:	98 87       	std	Y+8, r25	; 0x08
    124a:	a9 87       	std	Y+9, r26	; 0x09
    124c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    124e:	6f 81       	ldd	r22, Y+7	; 0x07
    1250:	78 85       	ldd	r23, Y+8	; 0x08
    1252:	89 85       	ldd	r24, Y+9	; 0x09
    1254:	9a 85       	ldd	r25, Y+10	; 0x0a
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	40 e8       	ldi	r20, 0x80	; 128
    125c:	5f e3       	ldi	r21, 0x3F	; 63
    125e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1262:	88 23       	and	r24, r24
    1264:	2c f4       	brge	.+10     	; 0x1270 <Mainoption+0x8e>
		__ticks = 1;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	9e 83       	std	Y+6, r25	; 0x06
    126c:	8d 83       	std	Y+5, r24	; 0x05
    126e:	3f c0       	rjmp	.+126    	; 0x12ee <Mainoption+0x10c>
	else if (__tmp > 65535)
    1270:	6f 81       	ldd	r22, Y+7	; 0x07
    1272:	78 85       	ldd	r23, Y+8	; 0x08
    1274:	89 85       	ldd	r24, Y+9	; 0x09
    1276:	9a 85       	ldd	r25, Y+10	; 0x0a
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	3f ef       	ldi	r19, 0xFF	; 255
    127c:	4f e7       	ldi	r20, 0x7F	; 127
    127e:	57 e4       	ldi	r21, 0x47	; 71
    1280:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1284:	18 16       	cp	r1, r24
    1286:	4c f5       	brge	.+82     	; 0x12da <Mainoption+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1288:	6b 85       	ldd	r22, Y+11	; 0x0b
    128a:	7c 85       	ldd	r23, Y+12	; 0x0c
    128c:	8d 85       	ldd	r24, Y+13	; 0x0d
    128e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	40 e2       	ldi	r20, 0x20	; 32
    1296:	51 e4       	ldi	r21, 0x41	; 65
    1298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	bc 01       	movw	r22, r24
    12a2:	cd 01       	movw	r24, r26
    12a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	9e 83       	std	Y+6, r25	; 0x06
    12ae:	8d 83       	std	Y+5, r24	; 0x05
    12b0:	0f c0       	rjmp	.+30     	; 0x12d0 <Mainoption+0xee>
    12b2:	88 ec       	ldi	r24, 0xC8	; 200
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	9c 83       	std	Y+4, r25	; 0x04
    12b8:	8b 83       	std	Y+3, r24	; 0x03
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	9c 81       	ldd	r25, Y+4	; 0x04
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <Mainoption+0xdc>
    12c2:	9c 83       	std	Y+4, r25	; 0x04
    12c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c6:	8d 81       	ldd	r24, Y+5	; 0x05
    12c8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	9e 83       	std	Y+6, r25	; 0x06
    12ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d0:	8d 81       	ldd	r24, Y+5	; 0x05
    12d2:	9e 81       	ldd	r25, Y+6	; 0x06
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	69 f7       	brne	.-38     	; 0x12b2 <Mainoption+0xd0>
    12d8:	14 c0       	rjmp	.+40     	; 0x1302 <Mainoption+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12da:	6f 81       	ldd	r22, Y+7	; 0x07
    12dc:	78 85       	ldd	r23, Y+8	; 0x08
    12de:	89 85       	ldd	r24, Y+9	; 0x09
    12e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	9e 83       	std	Y+6, r25	; 0x06
    12ec:	8d 83       	std	Y+5, r24	; 0x05
    12ee:	8d 81       	ldd	r24, Y+5	; 0x05
    12f0:	9e 81       	ldd	r25, Y+6	; 0x06
    12f2:	9a 83       	std	Y+2, r25	; 0x02
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	9a 81       	ldd	r25, Y+2	; 0x02
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	f1 f7       	brne	.-4      	; 0x12fa <Mainoption+0x118>
    12fe:	9a 83       	std	Y+2, r25	; 0x02
    1300:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	switch(g_pressedkey)
    1302:	80 91 45 01 	lds	r24, 0x0145
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	38 8b       	std	Y+16, r19	; 0x10
    130c:	2f 87       	std	Y+15, r18	; 0x0f
    130e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1310:	98 89       	ldd	r25, Y+16	; 0x10
    1312:	8b 32       	cpi	r24, 0x2B	; 43
    1314:	91 05       	cpc	r25, r1
    1316:	31 f0       	breq	.+12     	; 0x1324 <Mainoption+0x142>
    1318:	2f 85       	ldd	r18, Y+15	; 0x0f
    131a:	38 89       	ldd	r19, Y+16	; 0x10
    131c:	2d 32       	cpi	r18, 0x2D	; 45
    131e:	31 05       	cpc	r19, r1
    1320:	21 f0       	breq	.+8      	; 0x132a <Mainoption+0x148>
    1322:	06 c0       	rjmp	.+12     	; 0x1330 <Mainoption+0x14e>
	{
	case '+':
	{
		openndoor();
    1324:	0e 94 49 08 	call	0x1092	; 0x1092 <openndoor>
    1328:	05 c0       	rjmp	.+10     	; 0x1334 <Mainoption+0x152>
		break;
	}
	case '-':
	{
	changepassword();
    132a:	0e 94 60 07 	call	0xec0	; 0xec0 <changepassword>
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <Mainoption+0x152>
	break;
	}
	default:
	{
		wrongscreen();
    1330:	0e 94 4f 06 	call	0xc9e	; 0xc9e <wrongscreen>
	}
	}
}
    1334:	60 96       	adiw	r28, 0x10	; 16
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <main>:


int main()
{
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
	SREG|=(1<<7);// enabling global interrupt
    134e:	af e5       	ldi	r26, 0x5F	; 95
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	ef e5       	ldi	r30, 0x5F	; 95
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	80 68       	ori	r24, 0x80	; 128
    135a:	8c 93       	st	X, r24
	LCD_init(); // initializing LCD
    135c:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <LCD_init>
	UART_init(&uartConfig);//Initializing UART
    1360:	88 e2       	ldi	r24, 0x28	; 40
    1362:	91 e0       	ldi	r25, 0x01	; 1
    1364:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <UART_init>
TIMER0_setCallBack(counter3sec);  // Set timer for welcome screen to our project
    1368:	89 ef       	ldi	r24, 0xF9	; 249
    136a:	97 e0       	ldi	r25, 0x07	; 7
    136c:	0e 94 cd 13 	call	0x279a	; 0x279a <TIMER0_setCallBack>
		TIMER0_init(&TIMERconfig);
    1370:	8f e2       	ldi	r24, 0x2F	; 47
    1372:	91 e0       	ldi	r25, 0x01	; 1
    1374:	0e 94 34 13 	call	0x2668	; 0x2668 <TIMER0_init>
		LCD_displayString("Door Locker ");
    1378:	83 e0       	ldi	r24, 0x03	; 3
    137a:	91 e0       	ldi	r25, 0x01	; 1
    137c:	0e 94 1d 12 	call	0x243a	; 0x243a <LCD_displayString>
		LCD_displayStringRowColumn(1,0,"Security system");
    1380:	20 e1       	ldi	r18, 0x10	; 16
    1382:	31 e0       	ldi	r19, 0x01	; 1
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	a9 01       	movw	r20, r18
    138a:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_displayStringRowColumn>
	while(g_tick3 <= TIMER_TICKS_3SEC){};
    138e:	80 91 3c 01 	lds	r24, 0x013C
    1392:	90 91 3d 01 	lds	r25, 0x013D
    1396:	88 35       	cpi	r24, 0x58	; 88
    1398:	91 05       	cpc	r25, r1
    139a:	c8 f3       	brcs	.-14     	; 0x138e <main+0x48>
	while(1)
	{
		if(g_checknew==1)
    139c:	80 91 33 01 	lds	r24, 0x0133
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	29 f4       	brne	.+10     	; 0x13ae <main+0x68>
		{
			firsttimepass(origgpassword); //happens at new passwords
    13a4:	80 e4       	ldi	r24, 0x40	; 64
    13a6:	91 e0       	ldi	r25, 0x01	; 1
    13a8:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <firsttimepass>
    13ac:	f7 cf       	rjmp	.-18     	; 0x139c <main+0x56>
		}
		else
		{
			Mainoption(); // it is always on our main menu
    13ae:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <Mainoption>
    13b2:	f4 cf       	rjmp	.-24     	; 0x139c <main+0x56>

000013b4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <GPIO_setupPinDirection+0x6>
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <GPIO_setupPinDirection+0x8>
    13bc:	0f 92       	push	r0
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	89 83       	std	Y+1, r24	; 0x01
    13c4:	6a 83       	std	Y+2, r22	; 0x02
    13c6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	88 30       	cpi	r24, 0x08	; 8
    13cc:	08 f0       	brcs	.+2      	; 0x13d0 <GPIO_setupPinDirection+0x1c>
    13ce:	d5 c0       	rjmp	.+426    	; 0x157a <GPIO_setupPinDirection+0x1c6>
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	84 30       	cpi	r24, 0x04	; 4
    13d4:	08 f0       	brcs	.+2      	; 0x13d8 <GPIO_setupPinDirection+0x24>
    13d6:	d1 c0       	rjmp	.+418    	; 0x157a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	3d 83       	std	Y+5, r19	; 0x05
    13e0:	2c 83       	std	Y+4, r18	; 0x04
    13e2:	8c 81       	ldd	r24, Y+4	; 0x04
    13e4:	9d 81       	ldd	r25, Y+5	; 0x05
    13e6:	81 30       	cpi	r24, 0x01	; 1
    13e8:	91 05       	cpc	r25, r1
    13ea:	09 f4       	brne	.+2      	; 0x13ee <GPIO_setupPinDirection+0x3a>
    13ec:	43 c0       	rjmp	.+134    	; 0x1474 <GPIO_setupPinDirection+0xc0>
    13ee:	2c 81       	ldd	r18, Y+4	; 0x04
    13f0:	3d 81       	ldd	r19, Y+5	; 0x05
    13f2:	22 30       	cpi	r18, 0x02	; 2
    13f4:	31 05       	cpc	r19, r1
    13f6:	2c f4       	brge	.+10     	; 0x1402 <GPIO_setupPinDirection+0x4e>
    13f8:	8c 81       	ldd	r24, Y+4	; 0x04
    13fa:	9d 81       	ldd	r25, Y+5	; 0x05
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	71 f0       	breq	.+28     	; 0x141c <GPIO_setupPinDirection+0x68>
    1400:	bc c0       	rjmp	.+376    	; 0x157a <GPIO_setupPinDirection+0x1c6>
    1402:	2c 81       	ldd	r18, Y+4	; 0x04
    1404:	3d 81       	ldd	r19, Y+5	; 0x05
    1406:	22 30       	cpi	r18, 0x02	; 2
    1408:	31 05       	cpc	r19, r1
    140a:	09 f4       	brne	.+2      	; 0x140e <GPIO_setupPinDirection+0x5a>
    140c:	5f c0       	rjmp	.+190    	; 0x14cc <GPIO_setupPinDirection+0x118>
    140e:	8c 81       	ldd	r24, Y+4	; 0x04
    1410:	9d 81       	ldd	r25, Y+5	; 0x05
    1412:	83 30       	cpi	r24, 0x03	; 3
    1414:	91 05       	cpc	r25, r1
    1416:	09 f4       	brne	.+2      	; 0x141a <GPIO_setupPinDirection+0x66>
    1418:	85 c0       	rjmp	.+266    	; 0x1524 <GPIO_setupPinDirection+0x170>
    141a:	af c0       	rjmp	.+350    	; 0x157a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	a1 f4       	brne	.+40     	; 0x144a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1422:	aa e3       	ldi	r26, 0x3A	; 58
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	ea e3       	ldi	r30, 0x3A	; 58
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	48 2f       	mov	r20, r24
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	02 2e       	mov	r0, r18
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <GPIO_setupPinDirection+0x8c>
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	0a 94       	dec	r0
    1442:	e2 f7       	brpl	.-8      	; 0x143c <GPIO_setupPinDirection+0x88>
    1444:	84 2b       	or	r24, r20
    1446:	8c 93       	st	X, r24
    1448:	98 c0       	rjmp	.+304    	; 0x157a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    144a:	aa e3       	ldi	r26, 0x3A	; 58
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	ea e3       	ldi	r30, 0x3A	; 58
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	48 2f       	mov	r20, r24
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	02 2e       	mov	r0, r18
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <GPIO_setupPinDirection+0xb4>
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	0a 94       	dec	r0
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <GPIO_setupPinDirection+0xb0>
    146c:	80 95       	com	r24
    146e:	84 23       	and	r24, r20
    1470:	8c 93       	st	X, r24
    1472:	83 c0       	rjmp	.+262    	; 0x157a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	a1 f4       	brne	.+40     	; 0x14a2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    147a:	a7 e3       	ldi	r26, 0x37	; 55
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e7 e3       	ldi	r30, 0x37	; 55
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	48 2f       	mov	r20, r24
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 2e       	mov	r0, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <GPIO_setupPinDirection+0xe4>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	0a 94       	dec	r0
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <GPIO_setupPinDirection+0xe0>
    149c:	84 2b       	or	r24, r20
    149e:	8c 93       	st	X, r24
    14a0:	6c c0       	rjmp	.+216    	; 0x157a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    14a2:	a7 e3       	ldi	r26, 0x37	; 55
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e7 e3       	ldi	r30, 0x37	; 55
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	48 2f       	mov	r20, r24
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 2e       	mov	r0, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <GPIO_setupPinDirection+0x10c>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	0a 94       	dec	r0
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <GPIO_setupPinDirection+0x108>
    14c4:	80 95       	com	r24
    14c6:	84 23       	and	r24, r20
    14c8:	8c 93       	st	X, r24
    14ca:	57 c0       	rjmp	.+174    	; 0x157a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	81 30       	cpi	r24, 0x01	; 1
    14d0:	a1 f4       	brne	.+40     	; 0x14fa <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    14d2:	a4 e3       	ldi	r26, 0x34	; 52
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e4 e3       	ldi	r30, 0x34	; 52
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	48 2f       	mov	r20, r24
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	02 2e       	mov	r0, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <GPIO_setupPinDirection+0x13c>
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	0a 94       	dec	r0
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <GPIO_setupPinDirection+0x138>
    14f4:	84 2b       	or	r24, r20
    14f6:	8c 93       	st	X, r24
    14f8:	40 c0       	rjmp	.+128    	; 0x157a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    14fa:	a4 e3       	ldi	r26, 0x34	; 52
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e4 e3       	ldi	r30, 0x34	; 52
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	48 2f       	mov	r20, r24
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	02 2e       	mov	r0, r18
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <GPIO_setupPinDirection+0x164>
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	0a 94       	dec	r0
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <GPIO_setupPinDirection+0x160>
    151c:	80 95       	com	r24
    151e:	84 23       	and	r24, r20
    1520:	8c 93       	st	X, r24
    1522:	2b c0       	rjmp	.+86     	; 0x157a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	81 30       	cpi	r24, 0x01	; 1
    1528:	a1 f4       	brne	.+40     	; 0x1552 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    152a:	a1 e3       	ldi	r26, 0x31	; 49
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e1 e3       	ldi	r30, 0x31	; 49
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <GPIO_setupPinDirection+0x194>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <GPIO_setupPinDirection+0x190>
    154c:	84 2b       	or	r24, r20
    154e:	8c 93       	st	X, r24
    1550:	14 c0       	rjmp	.+40     	; 0x157a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1552:	a1 e3       	ldi	r26, 0x31	; 49
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e1 e3       	ldi	r30, 0x31	; 49
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <GPIO_setupPinDirection+0x1bc>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <GPIO_setupPinDirection+0x1b8>
    1574:	80 95       	com	r24
    1576:	84 23       	and	r24, r20
    1578:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	00 d0       	rcall	.+0      	; 0x1590 <GPIO_writePin+0x6>
    1590:	00 d0       	rcall	.+0      	; 0x1592 <GPIO_writePin+0x8>
    1592:	0f 92       	push	r0
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	89 83       	std	Y+1, r24	; 0x01
    159a:	6a 83       	std	Y+2, r22	; 0x02
    159c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	88 30       	cpi	r24, 0x08	; 8
    15a2:	08 f0       	brcs	.+2      	; 0x15a6 <GPIO_writePin+0x1c>
    15a4:	d5 c0       	rjmp	.+426    	; 0x1750 <GPIO_writePin+0x1c6>
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	84 30       	cpi	r24, 0x04	; 4
    15aa:	08 f0       	brcs	.+2      	; 0x15ae <GPIO_writePin+0x24>
    15ac:	d1 c0       	rjmp	.+418    	; 0x1750 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	3d 83       	std	Y+5, r19	; 0x05
    15b6:	2c 83       	std	Y+4, r18	; 0x04
    15b8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ba:	9d 81       	ldd	r25, Y+5	; 0x05
    15bc:	81 30       	cpi	r24, 0x01	; 1
    15be:	91 05       	cpc	r25, r1
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <GPIO_writePin+0x3a>
    15c2:	43 c0       	rjmp	.+134    	; 0x164a <GPIO_writePin+0xc0>
    15c4:	2c 81       	ldd	r18, Y+4	; 0x04
    15c6:	3d 81       	ldd	r19, Y+5	; 0x05
    15c8:	22 30       	cpi	r18, 0x02	; 2
    15ca:	31 05       	cpc	r19, r1
    15cc:	2c f4       	brge	.+10     	; 0x15d8 <GPIO_writePin+0x4e>
    15ce:	8c 81       	ldd	r24, Y+4	; 0x04
    15d0:	9d 81       	ldd	r25, Y+5	; 0x05
    15d2:	00 97       	sbiw	r24, 0x00	; 0
    15d4:	71 f0       	breq	.+28     	; 0x15f2 <GPIO_writePin+0x68>
    15d6:	bc c0       	rjmp	.+376    	; 0x1750 <GPIO_writePin+0x1c6>
    15d8:	2c 81       	ldd	r18, Y+4	; 0x04
    15da:	3d 81       	ldd	r19, Y+5	; 0x05
    15dc:	22 30       	cpi	r18, 0x02	; 2
    15de:	31 05       	cpc	r19, r1
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <GPIO_writePin+0x5a>
    15e2:	5f c0       	rjmp	.+190    	; 0x16a2 <GPIO_writePin+0x118>
    15e4:	8c 81       	ldd	r24, Y+4	; 0x04
    15e6:	9d 81       	ldd	r25, Y+5	; 0x05
    15e8:	83 30       	cpi	r24, 0x03	; 3
    15ea:	91 05       	cpc	r25, r1
    15ec:	09 f4       	brne	.+2      	; 0x15f0 <GPIO_writePin+0x66>
    15ee:	85 c0       	rjmp	.+266    	; 0x16fa <GPIO_writePin+0x170>
    15f0:	af c0       	rjmp	.+350    	; 0x1750 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	a1 f4       	brne	.+40     	; 0x1620 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    15f8:	ab e3       	ldi	r26, 0x3B	; 59
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	eb e3       	ldi	r30, 0x3B	; 59
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	48 2f       	mov	r20, r24
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 2e       	mov	r0, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <GPIO_writePin+0x8c>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	0a 94       	dec	r0
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <GPIO_writePin+0x88>
    161a:	84 2b       	or	r24, r20
    161c:	8c 93       	st	X, r24
    161e:	98 c0       	rjmp	.+304    	; 0x1750 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1620:	ab e3       	ldi	r26, 0x3B	; 59
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	eb e3       	ldi	r30, 0x3B	; 59
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	48 2f       	mov	r20, r24
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	02 2e       	mov	r0, r18
    1638:	02 c0       	rjmp	.+4      	; 0x163e <GPIO_writePin+0xb4>
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	0a 94       	dec	r0
    1640:	e2 f7       	brpl	.-8      	; 0x163a <GPIO_writePin+0xb0>
    1642:	80 95       	com	r24
    1644:	84 23       	and	r24, r20
    1646:	8c 93       	st	X, r24
    1648:	83 c0       	rjmp	.+262    	; 0x1750 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	a1 f4       	brne	.+40     	; 0x1678 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1650:	a8 e3       	ldi	r26, 0x38	; 56
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e8 e3       	ldi	r30, 0x38	; 56
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	48 2f       	mov	r20, r24
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	02 2e       	mov	r0, r18
    1668:	02 c0       	rjmp	.+4      	; 0x166e <GPIO_writePin+0xe4>
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	0a 94       	dec	r0
    1670:	e2 f7       	brpl	.-8      	; 0x166a <GPIO_writePin+0xe0>
    1672:	84 2b       	or	r24, r20
    1674:	8c 93       	st	X, r24
    1676:	6c c0       	rjmp	.+216    	; 0x1750 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1678:	a8 e3       	ldi	r26, 0x38	; 56
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e8 e3       	ldi	r30, 0x38	; 56
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	48 2f       	mov	r20, r24
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	02 2e       	mov	r0, r18
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <GPIO_writePin+0x10c>
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	0a 94       	dec	r0
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <GPIO_writePin+0x108>
    169a:	80 95       	com	r24
    169c:	84 23       	and	r24, r20
    169e:	8c 93       	st	X, r24
    16a0:	57 c0       	rjmp	.+174    	; 0x1750 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	a1 f4       	brne	.+40     	; 0x16d0 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    16a8:	a5 e3       	ldi	r26, 0x35	; 53
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e5 e3       	ldi	r30, 0x35	; 53
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	48 2f       	mov	r20, r24
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	02 2e       	mov	r0, r18
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <GPIO_writePin+0x13c>
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	0a 94       	dec	r0
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <GPIO_writePin+0x138>
    16ca:	84 2b       	or	r24, r20
    16cc:	8c 93       	st	X, r24
    16ce:	40 c0       	rjmp	.+128    	; 0x1750 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    16d0:	a5 e3       	ldi	r26, 0x35	; 53
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e5 e3       	ldi	r30, 0x35	; 53
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	48 2f       	mov	r20, r24
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 2e       	mov	r0, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <GPIO_writePin+0x164>
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	0a 94       	dec	r0
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <GPIO_writePin+0x160>
    16f2:	80 95       	com	r24
    16f4:	84 23       	and	r24, r20
    16f6:	8c 93       	st	X, r24
    16f8:	2b c0       	rjmp	.+86     	; 0x1750 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	81 30       	cpi	r24, 0x01	; 1
    16fe:	a1 f4       	brne	.+40     	; 0x1728 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1700:	a2 e3       	ldi	r26, 0x32	; 50
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e2 e3       	ldi	r30, 0x32	; 50
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <GPIO_writePin+0x194>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <GPIO_writePin+0x190>
    1722:	84 2b       	or	r24, r20
    1724:	8c 93       	st	X, r24
    1726:	14 c0       	rjmp	.+40     	; 0x1750 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1728:	a2 e3       	ldi	r26, 0x32	; 50
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e2 e3       	ldi	r30, 0x32	; 50
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	48 2f       	mov	r20, r24
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	02 2e       	mov	r0, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <GPIO_writePin+0x1bc>
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	0a 94       	dec	r0
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <GPIO_writePin+0x1b8>
    174a:	80 95       	com	r24
    174c:	84 23       	and	r24, r20
    174e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	00 d0       	rcall	.+0      	; 0x1766 <GPIO_readPin+0x6>
    1766:	00 d0       	rcall	.+0      	; 0x1768 <GPIO_readPin+0x8>
    1768:	0f 92       	push	r0
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	8a 83       	std	Y+2, r24	; 0x02
    1770:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1772:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	88 30       	cpi	r24, 0x08	; 8
    1778:	08 f0       	brcs	.+2      	; 0x177c <GPIO_readPin+0x1c>
    177a:	84 c0       	rjmp	.+264    	; 0x1884 <GPIO_readPin+0x124>
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	84 30       	cpi	r24, 0x04	; 4
    1780:	08 f0       	brcs	.+2      	; 0x1784 <GPIO_readPin+0x24>
    1782:	80 c0       	rjmp	.+256    	; 0x1884 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	3d 83       	std	Y+5, r19	; 0x05
    178c:	2c 83       	std	Y+4, r18	; 0x04
    178e:	4c 81       	ldd	r20, Y+4	; 0x04
    1790:	5d 81       	ldd	r21, Y+5	; 0x05
    1792:	41 30       	cpi	r20, 0x01	; 1
    1794:	51 05       	cpc	r21, r1
    1796:	79 f1       	breq	.+94     	; 0x17f6 <GPIO_readPin+0x96>
    1798:	8c 81       	ldd	r24, Y+4	; 0x04
    179a:	9d 81       	ldd	r25, Y+5	; 0x05
    179c:	82 30       	cpi	r24, 0x02	; 2
    179e:	91 05       	cpc	r25, r1
    17a0:	34 f4       	brge	.+12     	; 0x17ae <GPIO_readPin+0x4e>
    17a2:	2c 81       	ldd	r18, Y+4	; 0x04
    17a4:	3d 81       	ldd	r19, Y+5	; 0x05
    17a6:	21 15       	cp	r18, r1
    17a8:	31 05       	cpc	r19, r1
    17aa:	69 f0       	breq	.+26     	; 0x17c6 <GPIO_readPin+0x66>
    17ac:	6b c0       	rjmp	.+214    	; 0x1884 <GPIO_readPin+0x124>
    17ae:	4c 81       	ldd	r20, Y+4	; 0x04
    17b0:	5d 81       	ldd	r21, Y+5	; 0x05
    17b2:	42 30       	cpi	r20, 0x02	; 2
    17b4:	51 05       	cpc	r21, r1
    17b6:	b9 f1       	breq	.+110    	; 0x1826 <GPIO_readPin+0xc6>
    17b8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ba:	9d 81       	ldd	r25, Y+5	; 0x05
    17bc:	83 30       	cpi	r24, 0x03	; 3
    17be:	91 05       	cpc	r25, r1
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <GPIO_readPin+0x64>
    17c2:	49 c0       	rjmp	.+146    	; 0x1856 <GPIO_readPin+0xf6>
    17c4:	5f c0       	rjmp	.+190    	; 0x1884 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    17c6:	e9 e3       	ldi	r30, 0x39	; 57
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	88 2f       	mov	r24, r24
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	a9 01       	movw	r20, r18
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <GPIO_readPin+0x7e>
    17da:	55 95       	asr	r21
    17dc:	47 95       	ror	r20
    17de:	8a 95       	dec	r24
    17e0:	e2 f7       	brpl	.-8      	; 0x17da <GPIO_readPin+0x7a>
    17e2:	ca 01       	movw	r24, r20
    17e4:	81 70       	andi	r24, 0x01	; 1
    17e6:	90 70       	andi	r25, 0x00	; 0
    17e8:	88 23       	and	r24, r24
    17ea:	19 f0       	breq	.+6      	; 0x17f2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	49 c0       	rjmp	.+146    	; 0x1884 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17f2:	19 82       	std	Y+1, r1	; 0x01
    17f4:	47 c0       	rjmp	.+142    	; 0x1884 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    17f6:	e6 e3       	ldi	r30, 0x36	; 54
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	88 2f       	mov	r24, r24
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	a9 01       	movw	r20, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <GPIO_readPin+0xae>
    180a:	55 95       	asr	r21
    180c:	47 95       	ror	r20
    180e:	8a 95       	dec	r24
    1810:	e2 f7       	brpl	.-8      	; 0x180a <GPIO_readPin+0xaa>
    1812:	ca 01       	movw	r24, r20
    1814:	81 70       	andi	r24, 0x01	; 1
    1816:	90 70       	andi	r25, 0x00	; 0
    1818:	88 23       	and	r24, r24
    181a:	19 f0       	breq	.+6      	; 0x1822 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	89 83       	std	Y+1, r24	; 0x01
    1820:	31 c0       	rjmp	.+98     	; 0x1884 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1822:	19 82       	std	Y+1, r1	; 0x01
    1824:	2f c0       	rjmp	.+94     	; 0x1884 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1826:	e3 e3       	ldi	r30, 0x33	; 51
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	88 2f       	mov	r24, r24
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	a9 01       	movw	r20, r18
    1838:	02 c0       	rjmp	.+4      	; 0x183e <GPIO_readPin+0xde>
    183a:	55 95       	asr	r21
    183c:	47 95       	ror	r20
    183e:	8a 95       	dec	r24
    1840:	e2 f7       	brpl	.-8      	; 0x183a <GPIO_readPin+0xda>
    1842:	ca 01       	movw	r24, r20
    1844:	81 70       	andi	r24, 0x01	; 1
    1846:	90 70       	andi	r25, 0x00	; 0
    1848:	88 23       	and	r24, r24
    184a:	19 f0       	breq	.+6      	; 0x1852 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	89 83       	std	Y+1, r24	; 0x01
    1850:	19 c0       	rjmp	.+50     	; 0x1884 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1852:	19 82       	std	Y+1, r1	; 0x01
    1854:	17 c0       	rjmp	.+46     	; 0x1884 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1856:	e0 e3       	ldi	r30, 0x30	; 48
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	88 2f       	mov	r24, r24
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	a9 01       	movw	r20, r18
    1868:	02 c0       	rjmp	.+4      	; 0x186e <GPIO_readPin+0x10e>
    186a:	55 95       	asr	r21
    186c:	47 95       	ror	r20
    186e:	8a 95       	dec	r24
    1870:	e2 f7       	brpl	.-8      	; 0x186a <GPIO_readPin+0x10a>
    1872:	ca 01       	movw	r24, r20
    1874:	81 70       	andi	r24, 0x01	; 1
    1876:	90 70       	andi	r25, 0x00	; 0
    1878:	88 23       	and	r24, r24
    187a:	19 f0       	breq	.+6      	; 0x1882 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	89 83       	std	Y+1, r24	; 0x01
    1880:	01 c0       	rjmp	.+2      	; 0x1884 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1882:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1884:	89 81       	ldd	r24, Y+1	; 0x01
}
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	00 d0       	rcall	.+0      	; 0x189c <GPIO_setupPortDirection+0x6>
    189c:	00 d0       	rcall	.+0      	; 0x189e <GPIO_setupPortDirection+0x8>
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	89 83       	std	Y+1, r24	; 0x01
    18a4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	84 30       	cpi	r24, 0x04	; 4
    18aa:	90 f5       	brcc	.+100    	; 0x1910 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	3c 83       	std	Y+4, r19	; 0x04
    18b4:	2b 83       	std	Y+3, r18	; 0x03
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	91 05       	cpc	r25, r1
    18be:	d1 f0       	breq	.+52     	; 0x18f4 <GPIO_setupPortDirection+0x5e>
    18c0:	2b 81       	ldd	r18, Y+3	; 0x03
    18c2:	3c 81       	ldd	r19, Y+4	; 0x04
    18c4:	22 30       	cpi	r18, 0x02	; 2
    18c6:	31 05       	cpc	r19, r1
    18c8:	2c f4       	brge	.+10     	; 0x18d4 <GPIO_setupPortDirection+0x3e>
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	9c 81       	ldd	r25, Y+4	; 0x04
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	61 f0       	breq	.+24     	; 0x18ea <GPIO_setupPortDirection+0x54>
    18d2:	1e c0       	rjmp	.+60     	; 0x1910 <GPIO_setupPortDirection+0x7a>
    18d4:	2b 81       	ldd	r18, Y+3	; 0x03
    18d6:	3c 81       	ldd	r19, Y+4	; 0x04
    18d8:	22 30       	cpi	r18, 0x02	; 2
    18da:	31 05       	cpc	r19, r1
    18dc:	81 f0       	breq	.+32     	; 0x18fe <GPIO_setupPortDirection+0x68>
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	9c 81       	ldd	r25, Y+4	; 0x04
    18e2:	83 30       	cpi	r24, 0x03	; 3
    18e4:	91 05       	cpc	r25, r1
    18e6:	81 f0       	breq	.+32     	; 0x1908 <GPIO_setupPortDirection+0x72>
    18e8:	13 c0       	rjmp	.+38     	; 0x1910 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    18ea:	ea e3       	ldi	r30, 0x3A	; 58
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	80 83       	st	Z, r24
    18f2:	0e c0       	rjmp	.+28     	; 0x1910 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    18f4:	e7 e3       	ldi	r30, 0x37	; 55
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	80 83       	st	Z, r24
    18fc:	09 c0       	rjmp	.+18     	; 0x1910 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    18fe:	e4 e3       	ldi	r30, 0x34	; 52
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	80 83       	st	Z, r24
    1906:	04 c0       	rjmp	.+8      	; 0x1910 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1908:	e1 e3       	ldi	r30, 0x31	; 49
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	00 d0       	rcall	.+0      	; 0x1924 <GPIO_writePort+0x6>
    1924:	00 d0       	rcall	.+0      	; 0x1926 <GPIO_writePort+0x8>
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	89 83       	std	Y+1, r24	; 0x01
    192c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	84 30       	cpi	r24, 0x04	; 4
    1932:	90 f5       	brcc	.+100    	; 0x1998 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	3c 83       	std	Y+4, r19	; 0x04
    193c:	2b 83       	std	Y+3, r18	; 0x03
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	9c 81       	ldd	r25, Y+4	; 0x04
    1942:	81 30       	cpi	r24, 0x01	; 1
    1944:	91 05       	cpc	r25, r1
    1946:	d1 f0       	breq	.+52     	; 0x197c <GPIO_writePort+0x5e>
    1948:	2b 81       	ldd	r18, Y+3	; 0x03
    194a:	3c 81       	ldd	r19, Y+4	; 0x04
    194c:	22 30       	cpi	r18, 0x02	; 2
    194e:	31 05       	cpc	r19, r1
    1950:	2c f4       	brge	.+10     	; 0x195c <GPIO_writePort+0x3e>
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	9c 81       	ldd	r25, Y+4	; 0x04
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	61 f0       	breq	.+24     	; 0x1972 <GPIO_writePort+0x54>
    195a:	1e c0       	rjmp	.+60     	; 0x1998 <GPIO_writePort+0x7a>
    195c:	2b 81       	ldd	r18, Y+3	; 0x03
    195e:	3c 81       	ldd	r19, Y+4	; 0x04
    1960:	22 30       	cpi	r18, 0x02	; 2
    1962:	31 05       	cpc	r19, r1
    1964:	81 f0       	breq	.+32     	; 0x1986 <GPIO_writePort+0x68>
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	9c 81       	ldd	r25, Y+4	; 0x04
    196a:	83 30       	cpi	r24, 0x03	; 3
    196c:	91 05       	cpc	r25, r1
    196e:	81 f0       	breq	.+32     	; 0x1990 <GPIO_writePort+0x72>
    1970:	13 c0       	rjmp	.+38     	; 0x1998 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1972:	eb e3       	ldi	r30, 0x3B	; 59
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	80 83       	st	Z, r24
    197a:	0e c0       	rjmp	.+28     	; 0x1998 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    197c:	e8 e3       	ldi	r30, 0x38	; 56
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	80 83       	st	Z, r24
    1984:	09 c0       	rjmp	.+18     	; 0x1998 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1986:	e5 e3       	ldi	r30, 0x35	; 53
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	80 83       	st	Z, r24
    198e:	04 c0       	rjmp	.+8      	; 0x1998 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1990:	e2 e3       	ldi	r30, 0x32	; 50
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	80 83       	st	Z, r24
			break;
		}
	}
}
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	cf 91       	pop	r28
    19a2:	df 91       	pop	r29
    19a4:	08 95       	ret

000019a6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <GPIO_readPort+0x6>
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <GPIO_readPort+0x8>
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    19b4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	84 30       	cpi	r24, 0x04	; 4
    19ba:	90 f5       	brcc	.+100    	; 0x1a20 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	3c 83       	std	Y+4, r19	; 0x04
    19c4:	2b 83       	std	Y+3, r18	; 0x03
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ca:	81 30       	cpi	r24, 0x01	; 1
    19cc:	91 05       	cpc	r25, r1
    19ce:	d1 f0       	breq	.+52     	; 0x1a04 <GPIO_readPort+0x5e>
    19d0:	2b 81       	ldd	r18, Y+3	; 0x03
    19d2:	3c 81       	ldd	r19, Y+4	; 0x04
    19d4:	22 30       	cpi	r18, 0x02	; 2
    19d6:	31 05       	cpc	r19, r1
    19d8:	2c f4       	brge	.+10     	; 0x19e4 <GPIO_readPort+0x3e>
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	9c 81       	ldd	r25, Y+4	; 0x04
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	61 f0       	breq	.+24     	; 0x19fa <GPIO_readPort+0x54>
    19e2:	1e c0       	rjmp	.+60     	; 0x1a20 <GPIO_readPort+0x7a>
    19e4:	2b 81       	ldd	r18, Y+3	; 0x03
    19e6:	3c 81       	ldd	r19, Y+4	; 0x04
    19e8:	22 30       	cpi	r18, 0x02	; 2
    19ea:	31 05       	cpc	r19, r1
    19ec:	81 f0       	breq	.+32     	; 0x1a0e <GPIO_readPort+0x68>
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	9c 81       	ldd	r25, Y+4	; 0x04
    19f2:	83 30       	cpi	r24, 0x03	; 3
    19f4:	91 05       	cpc	r25, r1
    19f6:	81 f0       	breq	.+32     	; 0x1a18 <GPIO_readPort+0x72>
    19f8:	13 c0       	rjmp	.+38     	; 0x1a20 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    19fa:	e9 e3       	ldi	r30, 0x39	; 57
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	89 83       	std	Y+1, r24	; 0x01
    1a02:	0e c0       	rjmp	.+28     	; 0x1a20 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1a04:	e6 e3       	ldi	r30, 0x36	; 54
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	89 83       	std	Y+1, r24	; 0x01
    1a0c:	09 c0       	rjmp	.+18     	; 0x1a20 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1a0e:	e3 e3       	ldi	r30, 0x33	; 51
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	89 83       	std	Y+1, r24	; 0x01
    1a16:	04 c0       	rjmp	.+8      	; 0x1a20 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1a18:	e0 e3       	ldi	r30, 0x30	; 48
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <KEYPAD_getPressedKey+0x6>
    1a36:	0f 92       	push	r0
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1a3c:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1a3e:	1b 82       	std	Y+3, r1	; 0x03
    1a40:	43 c0       	rjmp	.+134    	; 0x1ac8 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	60 e0       	ldi	r22, 0x00	; 0
    1a46:	0e 94 4b 0c 	call	0x1896	; 0x1896 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	98 2f       	mov	r25, r24
    1a4e:	9c 5f       	subi	r25, 0xFC	; 252
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	69 2f       	mov	r22, r25
    1a54:	41 e0       	ldi	r20, 0x01	; 1
    1a56:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	88 2f       	mov	r24, r24
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	9c 01       	movw	r18, r24
    1a62:	2c 5f       	subi	r18, 0xFC	; 252
    1a64:	3f 4f       	sbci	r19, 0xFF	; 255
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <KEYPAD_getPressedKey+0x40>
    1a6c:	88 0f       	add	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	2a 95       	dec	r18
    1a72:	e2 f7       	brpl	.-8      	; 0x1a6c <KEYPAD_getPressedKey+0x3c>
    1a74:	80 95       	com	r24
    1a76:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	69 81       	ldd	r22, Y+1	; 0x01
    1a7c:	0e 94 8f 0c 	call	0x191e	; 0x191e <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1a80:	1a 82       	std	Y+2, r1	; 0x02
    1a82:	1c c0       	rjmp	.+56     	; 0x1abc <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	6a 81       	ldd	r22, Y+2	; 0x02
    1a88:	0e 94 b0 0b 	call	0x1760	; 0x1760 <GPIO_readPin>
    1a8c:	88 23       	and	r24, r24
    1a8e:	99 f4       	brne	.+38     	; 0x1ab6 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	88 2f       	mov	r24, r24
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	88 0f       	add	r24, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	98 2f       	mov	r25, r24
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	89 0f       	add	r24, r25
    1aa4:	8f 5f       	subi	r24, 0xFF	; 255
    1aa6:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	8f 5f       	subi	r24, 0xFF	; 255
    1aba:	8a 83       	std	Y+2, r24	; 0x02
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	84 30       	cpi	r24, 0x04	; 4
    1ac0:	08 f3       	brcs	.-62     	; 0x1a84 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	8f 5f       	subi	r24, 0xFF	; 255
    1ac6:	8b 83       	std	Y+3, r24	; 0x03
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	84 30       	cpi	r24, 0x04	; 4
    1acc:	08 f4       	brcc	.+2      	; 0x1ad0 <KEYPAD_getPressedKey+0xa0>
    1ace:	b9 cf       	rjmp	.-142    	; 0x1a42 <KEYPAD_getPressedKey+0x12>
    1ad0:	b6 cf       	rjmp	.-148    	; 0x1a3e <KEYPAD_getPressedKey+0xe>

00001ad2 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1ad8:	00 d0       	rcall	.+0      	; 0x1ada <KEYPAD_4x4_adjustKeyNumber+0x8>
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1ae0:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	3c 83       	std	Y+4, r19	; 0x04
    1aea:	2b 83       	std	Y+3, r18	; 0x03
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	9c 81       	ldd	r25, Y+4	; 0x04
    1af0:	88 30       	cpi	r24, 0x08	; 8
    1af2:	91 05       	cpc	r25, r1
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1af6:	70 c0       	rjmp	.+224    	; 0x1bd8 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1af8:	2b 81       	ldd	r18, Y+3	; 0x03
    1afa:	3c 81       	ldd	r19, Y+4	; 0x04
    1afc:	29 30       	cpi	r18, 0x09	; 9
    1afe:	31 05       	cpc	r19, r1
    1b00:	5c f5       	brge	.+86     	; 0x1b58 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	9c 81       	ldd	r25, Y+4	; 0x04
    1b06:	84 30       	cpi	r24, 0x04	; 4
    1b08:	91 05       	cpc	r25, r1
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1b0c:	59 c0       	rjmp	.+178    	; 0x1bc0 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1b0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b10:	3c 81       	ldd	r19, Y+4	; 0x04
    1b12:	25 30       	cpi	r18, 0x05	; 5
    1b14:	31 05       	cpc	r19, r1
    1b16:	9c f4       	brge	.+38     	; 0x1b3e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1c:	82 30       	cpi	r24, 0x02	; 2
    1b1e:	91 05       	cpc	r25, r1
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1b22:	48 c0       	rjmp	.+144    	; 0x1bb4 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1b24:	2b 81       	ldd	r18, Y+3	; 0x03
    1b26:	3c 81       	ldd	r19, Y+4	; 0x04
    1b28:	23 30       	cpi	r18, 0x03	; 3
    1b2a:	31 05       	cpc	r19, r1
    1b2c:	0c f0       	brlt	.+2      	; 0x1b30 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1b2e:	45 c0       	rjmp	.+138    	; 0x1bba <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	9c 81       	ldd	r25, Y+4	; 0x04
    1b34:	81 30       	cpi	r24, 0x01	; 1
    1b36:	91 05       	cpc	r25, r1
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1b3a:	39 c0       	rjmp	.+114    	; 0x1bae <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1b3c:	67 c0       	rjmp	.+206    	; 0x1c0c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1b3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b40:	3c 81       	ldd	r19, Y+4	; 0x04
    1b42:	26 30       	cpi	r18, 0x06	; 6
    1b44:	31 05       	cpc	r19, r1
    1b46:	09 f4       	brne	.+2      	; 0x1b4a <KEYPAD_4x4_adjustKeyNumber+0x78>
    1b48:	41 c0       	rjmp	.+130    	; 0x1bcc <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4e:	87 30       	cpi	r24, 0x07	; 7
    1b50:	91 05       	cpc	r25, r1
    1b52:	0c f0       	brlt	.+2      	; 0x1b56 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1b54:	3e c0       	rjmp	.+124    	; 0x1bd2 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1b56:	37 c0       	rjmp	.+110    	; 0x1bc6 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1b58:	2b 81       	ldd	r18, Y+3	; 0x03
    1b5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b5c:	2c 30       	cpi	r18, 0x0C	; 12
    1b5e:	31 05       	cpc	r19, r1
    1b60:	09 f4       	brne	.+2      	; 0x1b64 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1b62:	46 c0       	rjmp	.+140    	; 0x1bf0 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	9c 81       	ldd	r25, Y+4	; 0x04
    1b68:	8d 30       	cpi	r24, 0x0D	; 13
    1b6a:	91 05       	cpc	r25, r1
    1b6c:	5c f4       	brge	.+22     	; 0x1b84 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1b6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b70:	3c 81       	ldd	r19, Y+4	; 0x04
    1b72:	2a 30       	cpi	r18, 0x0A	; 10
    1b74:	31 05       	cpc	r19, r1
    1b76:	b1 f1       	breq	.+108    	; 0x1be4 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7c:	8b 30       	cpi	r24, 0x0B	; 11
    1b7e:	91 05       	cpc	r25, r1
    1b80:	a4 f5       	brge	.+104    	; 0x1bea <KEYPAD_4x4_adjustKeyNumber+0x118>
    1b82:	2d c0       	rjmp	.+90     	; 0x1bde <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1b84:	2b 81       	ldd	r18, Y+3	; 0x03
    1b86:	3c 81       	ldd	r19, Y+4	; 0x04
    1b88:	2e 30       	cpi	r18, 0x0E	; 14
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	b9 f1       	breq	.+110    	; 0x1bfc <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	9c 81       	ldd	r25, Y+4	; 0x04
    1b92:	8e 30       	cpi	r24, 0x0E	; 14
    1b94:	91 05       	cpc	r25, r1
    1b96:	7c f1       	brlt	.+94     	; 0x1bf6 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1b98:	2b 81       	ldd	r18, Y+3	; 0x03
    1b9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b9c:	2f 30       	cpi	r18, 0x0F	; 15
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	79 f1       	breq	.+94     	; 0x1c00 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba6:	80 31       	cpi	r24, 0x10	; 16
    1ba8:	91 05       	cpc	r25, r1
    1baa:	69 f1       	breq	.+90     	; 0x1c06 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1bac:	2f c0       	rjmp	.+94     	; 0x1c0c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1bae:	87 e0       	ldi	r24, 0x07	; 7
    1bb0:	89 83       	std	Y+1, r24	; 0x01
    1bb2:	2e c0       	rjmp	.+92     	; 0x1c10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1bb4:	88 e0       	ldi	r24, 0x08	; 8
    1bb6:	89 83       	std	Y+1, r24	; 0x01
    1bb8:	2b c0       	rjmp	.+86     	; 0x1c10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1bba:	89 e0       	ldi	r24, 0x09	; 9
    1bbc:	89 83       	std	Y+1, r24	; 0x01
    1bbe:	28 c0       	rjmp	.+80     	; 0x1c10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1bc0:	85 e2       	ldi	r24, 0x25	; 37
    1bc2:	89 83       	std	Y+1, r24	; 0x01
    1bc4:	25 c0       	rjmp	.+74     	; 0x1c10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1bc6:	84 e0       	ldi	r24, 0x04	; 4
    1bc8:	89 83       	std	Y+1, r24	; 0x01
    1bca:	22 c0       	rjmp	.+68     	; 0x1c10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1bcc:	85 e0       	ldi	r24, 0x05	; 5
    1bce:	89 83       	std	Y+1, r24	; 0x01
    1bd0:	1f c0       	rjmp	.+62     	; 0x1c10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1bd2:	86 e0       	ldi	r24, 0x06	; 6
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	1c c0       	rjmp	.+56     	; 0x1c10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1bd8:	8a e2       	ldi	r24, 0x2A	; 42
    1bda:	89 83       	std	Y+1, r24	; 0x01
    1bdc:	19 c0       	rjmp	.+50     	; 0x1c10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	89 83       	std	Y+1, r24	; 0x01
    1be2:	16 c0       	rjmp	.+44     	; 0x1c10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1be4:	82 e0       	ldi	r24, 0x02	; 2
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	13 c0       	rjmp	.+38     	; 0x1c10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1bea:	83 e0       	ldi	r24, 0x03	; 3
    1bec:	89 83       	std	Y+1, r24	; 0x01
    1bee:	10 c0       	rjmp	.+32     	; 0x1c10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1bf0:	8d e2       	ldi	r24, 0x2D	; 45
    1bf2:	89 83       	std	Y+1, r24	; 0x01
    1bf4:	0d c0       	rjmp	.+26     	; 0x1c10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1bf6:	8d e0       	ldi	r24, 0x0D	; 13
    1bf8:	89 83       	std	Y+1, r24	; 0x01
    1bfa:	0a c0       	rjmp	.+20     	; 0x1c10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1bfc:	19 82       	std	Y+1, r1	; 0x01
    1bfe:	08 c0       	rjmp	.+16     	; 0x1c10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1c00:	8d e3       	ldi	r24, 0x3D	; 61
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	05 c0       	rjmp	.+10     	; 0x1c10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1c06:	8b e2       	ldi	r24, 0x2B	; 43
    1c08:	89 83       	std	Y+1, r24	; 0x01
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	08 95       	ret

00001c20 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	60 e0       	ldi	r22, 0x00	; 0
    1c2c:	41 e0       	ldi	r20, 0x01	; 1
    1c2e:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	61 e0       	ldi	r22, 0x01	; 1
    1c36:	41 e0       	ldi	r20, 0x01	; 1
    1c38:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	62 e0       	ldi	r22, 0x02	; 2
    1c40:	41 e0       	ldi	r20, 0x01	; 1
    1c42:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1c46:	82 e0       	ldi	r24, 0x02	; 2
    1c48:	6f ef       	ldi	r22, 0xFF	; 255
    1c4a:	0e 94 4b 0c 	call	0x1896	; 0x1896 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1c4e:	88 e3       	ldi	r24, 0x38	; 56
    1c50:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1c54:	8c e0       	ldi	r24, 0x0C	; 12
    1c56:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <LCD_sendCommand>
}
    1c60:	cf 91       	pop	r28
    1c62:	df 91       	pop	r29
    1c64:	08 95       	ret

00001c66 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1c66:	df 93       	push	r29
    1c68:	cf 93       	push	r28
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	ea 97       	sbiw	r28, 0x3a	; 58
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	cd bf       	out	0x3d, r28	; 61
    1c7a:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1c7c:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	0e 94 c5 0a 	call	0x158a	; 0x158a <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	61 e0       	ldi	r22, 0x01	; 1
    1c8c:	40 e0       	ldi	r20, 0x00	; 0
    1c8e:	0e 94 c5 0a 	call	0x158a	; 0x158a <GPIO_writePin>
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	a0 e8       	ldi	r26, 0x80	; 128
    1c98:	bf e3       	ldi	r27, 0x3F	; 63
    1c9a:	8d ab       	std	Y+53, r24	; 0x35
    1c9c:	9e ab       	std	Y+54, r25	; 0x36
    1c9e:	af ab       	std	Y+55, r26	; 0x37
    1ca0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ca4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ca6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ca8:	98 ad       	ldd	r25, Y+56	; 0x38
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	4a ef       	ldi	r20, 0xFA	; 250
    1cb0:	54 e4       	ldi	r21, 0x44	; 68
    1cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	89 ab       	std	Y+49, r24	; 0x31
    1cbc:	9a ab       	std	Y+50, r25	; 0x32
    1cbe:	ab ab       	std	Y+51, r26	; 0x33
    1cc0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cc2:	69 a9       	ldd	r22, Y+49	; 0x31
    1cc4:	7a a9       	ldd	r23, Y+50	; 0x32
    1cc6:	8b a9       	ldd	r24, Y+51	; 0x33
    1cc8:	9c a9       	ldd	r25, Y+52	; 0x34
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e8       	ldi	r20, 0x80	; 128
    1cd0:	5f e3       	ldi	r21, 0x3F	; 63
    1cd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd6:	88 23       	and	r24, r24
    1cd8:	2c f4       	brge	.+10     	; 0x1ce4 <LCD_sendCommand+0x7e>
		__ticks = 1;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	98 ab       	std	Y+48, r25	; 0x30
    1ce0:	8f a7       	std	Y+47, r24	; 0x2f
    1ce2:	3f c0       	rjmp	.+126    	; 0x1d62 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    1ce4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ce6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ce8:	8b a9       	ldd	r24, Y+51	; 0x33
    1cea:	9c a9       	ldd	r25, Y+52	; 0x34
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	3f ef       	ldi	r19, 0xFF	; 255
    1cf0:	4f e7       	ldi	r20, 0x7F	; 127
    1cf2:	57 e4       	ldi	r21, 0x47	; 71
    1cf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cf8:	18 16       	cp	r1, r24
    1cfa:	4c f5       	brge	.+82     	; 0x1d4e <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfc:	6d a9       	ldd	r22, Y+53	; 0x35
    1cfe:	7e a9       	ldd	r23, Y+54	; 0x36
    1d00:	8f a9       	ldd	r24, Y+55	; 0x37
    1d02:	98 ad       	ldd	r25, Y+56	; 0x38
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	40 e2       	ldi	r20, 0x20	; 32
    1d0a:	51 e4       	ldi	r21, 0x41	; 65
    1d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	bc 01       	movw	r22, r24
    1d16:	cd 01       	movw	r24, r26
    1d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	98 ab       	std	Y+48, r25	; 0x30
    1d22:	8f a7       	std	Y+47, r24	; 0x2f
    1d24:	0f c0       	rjmp	.+30     	; 0x1d44 <LCD_sendCommand+0xde>
    1d26:	88 ec       	ldi	r24, 0xC8	; 200
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	9e a7       	std	Y+46, r25	; 0x2e
    1d2c:	8d a7       	std	Y+45, r24	; 0x2d
    1d2e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d30:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <LCD_sendCommand+0xcc>
    1d36:	9e a7       	std	Y+46, r25	; 0x2e
    1d38:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d3c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	98 ab       	std	Y+48, r25	; 0x30
    1d42:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d44:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d46:	98 a9       	ldd	r25, Y+48	; 0x30
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	69 f7       	brne	.-38     	; 0x1d26 <LCD_sendCommand+0xc0>
    1d4c:	14 c0       	rjmp	.+40     	; 0x1d76 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d50:	7a a9       	ldd	r23, Y+50	; 0x32
    1d52:	8b a9       	ldd	r24, Y+51	; 0x33
    1d54:	9c a9       	ldd	r25, Y+52	; 0x34
    1d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	98 ab       	std	Y+48, r25	; 0x30
    1d60:	8f a7       	std	Y+47, r24	; 0x2f
    1d62:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d64:	98 a9       	ldd	r25, Y+48	; 0x30
    1d66:	9c a7       	std	Y+44, r25	; 0x2c
    1d68:	8b a7       	std	Y+43, r24	; 0x2b
    1d6a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d6c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <LCD_sendCommand+0x108>
    1d72:	9c a7       	std	Y+44, r25	; 0x2c
    1d74:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	62 e0       	ldi	r22, 0x02	; 2
    1d7a:	41 e0       	ldi	r20, 0x01	; 1
    1d7c:	0e 94 c5 0a 	call	0x158a	; 0x158a <GPIO_writePin>
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	a0 e8       	ldi	r26, 0x80	; 128
    1d86:	bf e3       	ldi	r27, 0x3F	; 63
    1d88:	8f a3       	std	Y+39, r24	; 0x27
    1d8a:	98 a7       	std	Y+40, r25	; 0x28
    1d8c:	a9 a7       	std	Y+41, r26	; 0x29
    1d8e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d90:	6f a1       	ldd	r22, Y+39	; 0x27
    1d92:	78 a5       	ldd	r23, Y+40	; 0x28
    1d94:	89 a5       	ldd	r24, Y+41	; 0x29
    1d96:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	4a ef       	ldi	r20, 0xFA	; 250
    1d9e:	54 e4       	ldi	r21, 0x44	; 68
    1da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	8b a3       	std	Y+35, r24	; 0x23
    1daa:	9c a3       	std	Y+36, r25	; 0x24
    1dac:	ad a3       	std	Y+37, r26	; 0x25
    1dae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1db0:	6b a1       	ldd	r22, Y+35	; 0x23
    1db2:	7c a1       	ldd	r23, Y+36	; 0x24
    1db4:	8d a1       	ldd	r24, Y+37	; 0x25
    1db6:	9e a1       	ldd	r25, Y+38	; 0x26
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	40 e8       	ldi	r20, 0x80	; 128
    1dbe:	5f e3       	ldi	r21, 0x3F	; 63
    1dc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dc4:	88 23       	and	r24, r24
    1dc6:	2c f4       	brge	.+10     	; 0x1dd2 <LCD_sendCommand+0x16c>
		__ticks = 1;
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	9a a3       	std	Y+34, r25	; 0x22
    1dce:	89 a3       	std	Y+33, r24	; 0x21
    1dd0:	3f c0       	rjmp	.+126    	; 0x1e50 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    1dd2:	6b a1       	ldd	r22, Y+35	; 0x23
    1dd4:	7c a1       	ldd	r23, Y+36	; 0x24
    1dd6:	8d a1       	ldd	r24, Y+37	; 0x25
    1dd8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	3f ef       	ldi	r19, 0xFF	; 255
    1dde:	4f e7       	ldi	r20, 0x7F	; 127
    1de0:	57 e4       	ldi	r21, 0x47	; 71
    1de2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1de6:	18 16       	cp	r1, r24
    1de8:	4c f5       	brge	.+82     	; 0x1e3c <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dea:	6f a1       	ldd	r22, Y+39	; 0x27
    1dec:	78 a5       	ldd	r23, Y+40	; 0x28
    1dee:	89 a5       	ldd	r24, Y+41	; 0x29
    1df0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e2       	ldi	r20, 0x20	; 32
    1df8:	51 e4       	ldi	r21, 0x41	; 65
    1dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	bc 01       	movw	r22, r24
    1e04:	cd 01       	movw	r24, r26
    1e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	9a a3       	std	Y+34, r25	; 0x22
    1e10:	89 a3       	std	Y+33, r24	; 0x21
    1e12:	0f c0       	rjmp	.+30     	; 0x1e32 <LCD_sendCommand+0x1cc>
    1e14:	88 ec       	ldi	r24, 0xC8	; 200
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	98 a3       	std	Y+32, r25	; 0x20
    1e1a:	8f 8f       	std	Y+31, r24	; 0x1f
    1e1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e1e:	98 a1       	ldd	r25, Y+32	; 0x20
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <LCD_sendCommand+0x1ba>
    1e24:	98 a3       	std	Y+32, r25	; 0x20
    1e26:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e28:	89 a1       	ldd	r24, Y+33	; 0x21
    1e2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	9a a3       	std	Y+34, r25	; 0x22
    1e30:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e32:	89 a1       	ldd	r24, Y+33	; 0x21
    1e34:	9a a1       	ldd	r25, Y+34	; 0x22
    1e36:	00 97       	sbiw	r24, 0x00	; 0
    1e38:	69 f7       	brne	.-38     	; 0x1e14 <LCD_sendCommand+0x1ae>
    1e3a:	14 c0       	rjmp	.+40     	; 0x1e64 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e40:	8d a1       	ldd	r24, Y+37	; 0x25
    1e42:	9e a1       	ldd	r25, Y+38	; 0x26
    1e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	9a a3       	std	Y+34, r25	; 0x22
    1e4e:	89 a3       	std	Y+33, r24	; 0x21
    1e50:	89 a1       	ldd	r24, Y+33	; 0x21
    1e52:	9a a1       	ldd	r25, Y+34	; 0x22
    1e54:	9e 8f       	std	Y+30, r25	; 0x1e
    1e56:	8d 8f       	std	Y+29, r24	; 0x1d
    1e58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <LCD_sendCommand+0x1f6>
    1e60:	9e 8f       	std	Y+30, r25	; 0x1e
    1e62:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1e64:	82 e0       	ldi	r24, 0x02	; 2
    1e66:	6a ad       	ldd	r22, Y+58	; 0x3a
    1e68:	0e 94 8f 0c 	call	0x191e	; 0x191e <GPIO_writePort>
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	a0 e8       	ldi	r26, 0x80	; 128
    1e72:	bf e3       	ldi	r27, 0x3F	; 63
    1e74:	89 8f       	std	Y+25, r24	; 0x19
    1e76:	9a 8f       	std	Y+26, r25	; 0x1a
    1e78:	ab 8f       	std	Y+27, r26	; 0x1b
    1e7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	4a ef       	ldi	r20, 0xFA	; 250
    1e8a:	54 e4       	ldi	r21, 0x44	; 68
    1e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	8d 8b       	std	Y+21, r24	; 0x15
    1e96:	9e 8b       	std	Y+22, r25	; 0x16
    1e98:	af 8b       	std	Y+23, r26	; 0x17
    1e9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	40 e8       	ldi	r20, 0x80	; 128
    1eaa:	5f e3       	ldi	r21, 0x3F	; 63
    1eac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb0:	88 23       	and	r24, r24
    1eb2:	2c f4       	brge	.+10     	; 0x1ebe <LCD_sendCommand+0x258>
		__ticks = 1;
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	9c 8b       	std	Y+20, r25	; 0x14
    1eba:	8b 8b       	std	Y+19, r24	; 0x13
    1ebc:	3f c0       	rjmp	.+126    	; 0x1f3c <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1ebe:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ec2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ec4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	3f ef       	ldi	r19, 0xFF	; 255
    1eca:	4f e7       	ldi	r20, 0x7F	; 127
    1ecc:	57 e4       	ldi	r21, 0x47	; 71
    1ece:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed2:	18 16       	cp	r1, r24
    1ed4:	4c f5       	brge	.+82     	; 0x1f28 <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ed8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1edc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	40 e2       	ldi	r20, 0x20	; 32
    1ee4:	51 e4       	ldi	r21, 0x41	; 65
    1ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	bc 01       	movw	r22, r24
    1ef0:	cd 01       	movw	r24, r26
    1ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	9c 8b       	std	Y+20, r25	; 0x14
    1efc:	8b 8b       	std	Y+19, r24	; 0x13
    1efe:	0f c0       	rjmp	.+30     	; 0x1f1e <LCD_sendCommand+0x2b8>
    1f00:	88 ec       	ldi	r24, 0xC8	; 200
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	9a 8b       	std	Y+18, r25	; 0x12
    1f06:	89 8b       	std	Y+17, r24	; 0x11
    1f08:	89 89       	ldd	r24, Y+17	; 0x11
    1f0a:	9a 89       	ldd	r25, Y+18	; 0x12
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	f1 f7       	brne	.-4      	; 0x1f0c <LCD_sendCommand+0x2a6>
    1f10:	9a 8b       	std	Y+18, r25	; 0x12
    1f12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f14:	8b 89       	ldd	r24, Y+19	; 0x13
    1f16:	9c 89       	ldd	r25, Y+20	; 0x14
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	9c 8b       	std	Y+20, r25	; 0x14
    1f1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f20:	9c 89       	ldd	r25, Y+20	; 0x14
    1f22:	00 97       	sbiw	r24, 0x00	; 0
    1f24:	69 f7       	brne	.-38     	; 0x1f00 <LCD_sendCommand+0x29a>
    1f26:	14 c0       	rjmp	.+40     	; 0x1f50 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f28:	6d 89       	ldd	r22, Y+21	; 0x15
    1f2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	9c 8b       	std	Y+20, r25	; 0x14
    1f3a:	8b 8b       	std	Y+19, r24	; 0x13
    1f3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f40:	98 8b       	std	Y+16, r25	; 0x10
    1f42:	8f 87       	std	Y+15, r24	; 0x0f
    1f44:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f46:	98 89       	ldd	r25, Y+16	; 0x10
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <LCD_sendCommand+0x2e2>
    1f4c:	98 8b       	std	Y+16, r25	; 0x10
    1f4e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	62 e0       	ldi	r22, 0x02	; 2
    1f54:	40 e0       	ldi	r20, 0x00	; 0
    1f56:	0e 94 c5 0a 	call	0x158a	; 0x158a <GPIO_writePin>
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	a0 e8       	ldi	r26, 0x80	; 128
    1f60:	bf e3       	ldi	r27, 0x3F	; 63
    1f62:	8b 87       	std	Y+11, r24	; 0x0b
    1f64:	9c 87       	std	Y+12, r25	; 0x0c
    1f66:	ad 87       	std	Y+13, r26	; 0x0d
    1f68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f70:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	4a ef       	ldi	r20, 0xFA	; 250
    1f78:	54 e4       	ldi	r21, 0x44	; 68
    1f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	8f 83       	std	Y+7, r24	; 0x07
    1f84:	98 87       	std	Y+8, r25	; 0x08
    1f86:	a9 87       	std	Y+9, r26	; 0x09
    1f88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8c:	78 85       	ldd	r23, Y+8	; 0x08
    1f8e:	89 85       	ldd	r24, Y+9	; 0x09
    1f90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	40 e8       	ldi	r20, 0x80	; 128
    1f98:	5f e3       	ldi	r21, 0x3F	; 63
    1f9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f9e:	88 23       	and	r24, r24
    1fa0:	2c f4       	brge	.+10     	; 0x1fac <LCD_sendCommand+0x346>
		__ticks = 1;
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	9e 83       	std	Y+6, r25	; 0x06
    1fa8:	8d 83       	std	Y+5, r24	; 0x05
    1faa:	3f c0       	rjmp	.+126    	; 0x202a <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    1fac:	6f 81       	ldd	r22, Y+7	; 0x07
    1fae:	78 85       	ldd	r23, Y+8	; 0x08
    1fb0:	89 85       	ldd	r24, Y+9	; 0x09
    1fb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	3f ef       	ldi	r19, 0xFF	; 255
    1fb8:	4f e7       	ldi	r20, 0x7F	; 127
    1fba:	57 e4       	ldi	r21, 0x47	; 71
    1fbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fc0:	18 16       	cp	r1, r24
    1fc2:	4c f5       	brge	.+82     	; 0x2016 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	40 e2       	ldi	r20, 0x20	; 32
    1fd2:	51 e4       	ldi	r21, 0x41	; 65
    1fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	bc 01       	movw	r22, r24
    1fde:	cd 01       	movw	r24, r26
    1fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	9e 83       	std	Y+6, r25	; 0x06
    1fea:	8d 83       	std	Y+5, r24	; 0x05
    1fec:	0f c0       	rjmp	.+30     	; 0x200c <LCD_sendCommand+0x3a6>
    1fee:	88 ec       	ldi	r24, 0xC8	; 200
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	9c 83       	std	Y+4, r25	; 0x04
    1ff4:	8b 83       	std	Y+3, r24	; 0x03
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	f1 f7       	brne	.-4      	; 0x1ffa <LCD_sendCommand+0x394>
    1ffe:	9c 83       	std	Y+4, r25	; 0x04
    2000:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2002:	8d 81       	ldd	r24, Y+5	; 0x05
    2004:	9e 81       	ldd	r25, Y+6	; 0x06
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	9e 83       	std	Y+6, r25	; 0x06
    200a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200c:	8d 81       	ldd	r24, Y+5	; 0x05
    200e:	9e 81       	ldd	r25, Y+6	; 0x06
    2010:	00 97       	sbiw	r24, 0x00	; 0
    2012:	69 f7       	brne	.-38     	; 0x1fee <LCD_sendCommand+0x388>
    2014:	14 c0       	rjmp	.+40     	; 0x203e <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2016:	6f 81       	ldd	r22, Y+7	; 0x07
    2018:	78 85       	ldd	r23, Y+8	; 0x08
    201a:	89 85       	ldd	r24, Y+9	; 0x09
    201c:	9a 85       	ldd	r25, Y+10	; 0x0a
    201e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	9e 83       	std	Y+6, r25	; 0x06
    2028:	8d 83       	std	Y+5, r24	; 0x05
    202a:	8d 81       	ldd	r24, Y+5	; 0x05
    202c:	9e 81       	ldd	r25, Y+6	; 0x06
    202e:	9a 83       	std	Y+2, r25	; 0x02
    2030:	89 83       	std	Y+1, r24	; 0x01
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	9a 81       	ldd	r25, Y+2	; 0x02
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	f1 f7       	brne	.-4      	; 0x2036 <LCD_sendCommand+0x3d0>
    203a:	9a 83       	std	Y+2, r25	; 0x02
    203c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    203e:	ea 96       	adiw	r28, 0x3a	; 58
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	de bf       	out	0x3e, r29	; 62
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	cd bf       	out	0x3d, r28	; 61
    204a:	cf 91       	pop	r28
    204c:	df 91       	pop	r29
    204e:	08 95       	ret

00002050 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2050:	df 93       	push	r29
    2052:	cf 93       	push	r28
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	ea 97       	sbiw	r28, 0x3a	; 58
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	de bf       	out	0x3e, r29	; 62
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	cd bf       	out	0x3d, r28	; 61
    2064:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2066:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	60 e0       	ldi	r22, 0x00	; 0
    206c:	41 e0       	ldi	r20, 0x01	; 1
    206e:	0e 94 c5 0a 	call	0x158a	; 0x158a <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	61 e0       	ldi	r22, 0x01	; 1
    2076:	40 e0       	ldi	r20, 0x00	; 0
    2078:	0e 94 c5 0a 	call	0x158a	; 0x158a <GPIO_writePin>
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	a0 e8       	ldi	r26, 0x80	; 128
    2082:	bf e3       	ldi	r27, 0x3F	; 63
    2084:	8d ab       	std	Y+53, r24	; 0x35
    2086:	9e ab       	std	Y+54, r25	; 0x36
    2088:	af ab       	std	Y+55, r26	; 0x37
    208a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208c:	6d a9       	ldd	r22, Y+53	; 0x35
    208e:	7e a9       	ldd	r23, Y+54	; 0x36
    2090:	8f a9       	ldd	r24, Y+55	; 0x37
    2092:	98 ad       	ldd	r25, Y+56	; 0x38
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	4a ef       	ldi	r20, 0xFA	; 250
    209a:	54 e4       	ldi	r21, 0x44	; 68
    209c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	89 ab       	std	Y+49, r24	; 0x31
    20a6:	9a ab       	std	Y+50, r25	; 0x32
    20a8:	ab ab       	std	Y+51, r26	; 0x33
    20aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20ac:	69 a9       	ldd	r22, Y+49	; 0x31
    20ae:	7a a9       	ldd	r23, Y+50	; 0x32
    20b0:	8b a9       	ldd	r24, Y+51	; 0x33
    20b2:	9c a9       	ldd	r25, Y+52	; 0x34
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e8       	ldi	r20, 0x80	; 128
    20ba:	5f e3       	ldi	r21, 0x3F	; 63
    20bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c0:	88 23       	and	r24, r24
    20c2:	2c f4       	brge	.+10     	; 0x20ce <LCD_displayCharacter+0x7e>
		__ticks = 1;
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	98 ab       	std	Y+48, r25	; 0x30
    20ca:	8f a7       	std	Y+47, r24	; 0x2f
    20cc:	3f c0       	rjmp	.+126    	; 0x214c <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    20ce:	69 a9       	ldd	r22, Y+49	; 0x31
    20d0:	7a a9       	ldd	r23, Y+50	; 0x32
    20d2:	8b a9       	ldd	r24, Y+51	; 0x33
    20d4:	9c a9       	ldd	r25, Y+52	; 0x34
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	3f ef       	ldi	r19, 0xFF	; 255
    20da:	4f e7       	ldi	r20, 0x7F	; 127
    20dc:	57 e4       	ldi	r21, 0x47	; 71
    20de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e2:	18 16       	cp	r1, r24
    20e4:	4c f5       	brge	.+82     	; 0x2138 <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e6:	6d a9       	ldd	r22, Y+53	; 0x35
    20e8:	7e a9       	ldd	r23, Y+54	; 0x36
    20ea:	8f a9       	ldd	r24, Y+55	; 0x37
    20ec:	98 ad       	ldd	r25, Y+56	; 0x38
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e2       	ldi	r20, 0x20	; 32
    20f4:	51 e4       	ldi	r21, 0x41	; 65
    20f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	bc 01       	movw	r22, r24
    2100:	cd 01       	movw	r24, r26
    2102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	98 ab       	std	Y+48, r25	; 0x30
    210c:	8f a7       	std	Y+47, r24	; 0x2f
    210e:	0f c0       	rjmp	.+30     	; 0x212e <LCD_displayCharacter+0xde>
    2110:	88 ec       	ldi	r24, 0xC8	; 200
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	9e a7       	std	Y+46, r25	; 0x2e
    2116:	8d a7       	std	Y+45, r24	; 0x2d
    2118:	8d a5       	ldd	r24, Y+45	; 0x2d
    211a:	9e a5       	ldd	r25, Y+46	; 0x2e
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <LCD_displayCharacter+0xcc>
    2120:	9e a7       	std	Y+46, r25	; 0x2e
    2122:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2124:	8f a5       	ldd	r24, Y+47	; 0x2f
    2126:	98 a9       	ldd	r25, Y+48	; 0x30
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	98 ab       	std	Y+48, r25	; 0x30
    212c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2130:	98 a9       	ldd	r25, Y+48	; 0x30
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	69 f7       	brne	.-38     	; 0x2110 <LCD_displayCharacter+0xc0>
    2136:	14 c0       	rjmp	.+40     	; 0x2160 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2138:	69 a9       	ldd	r22, Y+49	; 0x31
    213a:	7a a9       	ldd	r23, Y+50	; 0x32
    213c:	8b a9       	ldd	r24, Y+51	; 0x33
    213e:	9c a9       	ldd	r25, Y+52	; 0x34
    2140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	98 ab       	std	Y+48, r25	; 0x30
    214a:	8f a7       	std	Y+47, r24	; 0x2f
    214c:	8f a5       	ldd	r24, Y+47	; 0x2f
    214e:	98 a9       	ldd	r25, Y+48	; 0x30
    2150:	9c a7       	std	Y+44, r25	; 0x2c
    2152:	8b a7       	std	Y+43, r24	; 0x2b
    2154:	8b a5       	ldd	r24, Y+43	; 0x2b
    2156:	9c a5       	ldd	r25, Y+44	; 0x2c
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	f1 f7       	brne	.-4      	; 0x2158 <LCD_displayCharacter+0x108>
    215c:	9c a7       	std	Y+44, r25	; 0x2c
    215e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	62 e0       	ldi	r22, 0x02	; 2
    2164:	41 e0       	ldi	r20, 0x01	; 1
    2166:	0e 94 c5 0a 	call	0x158a	; 0x158a <GPIO_writePin>
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	a0 e8       	ldi	r26, 0x80	; 128
    2170:	bf e3       	ldi	r27, 0x3F	; 63
    2172:	8f a3       	std	Y+39, r24	; 0x27
    2174:	98 a7       	std	Y+40, r25	; 0x28
    2176:	a9 a7       	std	Y+41, r26	; 0x29
    2178:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217a:	6f a1       	ldd	r22, Y+39	; 0x27
    217c:	78 a5       	ldd	r23, Y+40	; 0x28
    217e:	89 a5       	ldd	r24, Y+41	; 0x29
    2180:	9a a5       	ldd	r25, Y+42	; 0x2a
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	4a ef       	ldi	r20, 0xFA	; 250
    2188:	54 e4       	ldi	r21, 0x44	; 68
    218a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	8b a3       	std	Y+35, r24	; 0x23
    2194:	9c a3       	std	Y+36, r25	; 0x24
    2196:	ad a3       	std	Y+37, r26	; 0x25
    2198:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    219a:	6b a1       	ldd	r22, Y+35	; 0x23
    219c:	7c a1       	ldd	r23, Y+36	; 0x24
    219e:	8d a1       	ldd	r24, Y+37	; 0x25
    21a0:	9e a1       	ldd	r25, Y+38	; 0x26
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	40 e8       	ldi	r20, 0x80	; 128
    21a8:	5f e3       	ldi	r21, 0x3F	; 63
    21aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ae:	88 23       	and	r24, r24
    21b0:	2c f4       	brge	.+10     	; 0x21bc <LCD_displayCharacter+0x16c>
		__ticks = 1;
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	9a a3       	std	Y+34, r25	; 0x22
    21b8:	89 a3       	std	Y+33, r24	; 0x21
    21ba:	3f c0       	rjmp	.+126    	; 0x223a <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    21bc:	6b a1       	ldd	r22, Y+35	; 0x23
    21be:	7c a1       	ldd	r23, Y+36	; 0x24
    21c0:	8d a1       	ldd	r24, Y+37	; 0x25
    21c2:	9e a1       	ldd	r25, Y+38	; 0x26
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	3f ef       	ldi	r19, 0xFF	; 255
    21c8:	4f e7       	ldi	r20, 0x7F	; 127
    21ca:	57 e4       	ldi	r21, 0x47	; 71
    21cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21d0:	18 16       	cp	r1, r24
    21d2:	4c f5       	brge	.+82     	; 0x2226 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d4:	6f a1       	ldd	r22, Y+39	; 0x27
    21d6:	78 a5       	ldd	r23, Y+40	; 0x28
    21d8:	89 a5       	ldd	r24, Y+41	; 0x29
    21da:	9a a5       	ldd	r25, Y+42	; 0x2a
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e2       	ldi	r20, 0x20	; 32
    21e2:	51 e4       	ldi	r21, 0x41	; 65
    21e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	bc 01       	movw	r22, r24
    21ee:	cd 01       	movw	r24, r26
    21f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	9a a3       	std	Y+34, r25	; 0x22
    21fa:	89 a3       	std	Y+33, r24	; 0x21
    21fc:	0f c0       	rjmp	.+30     	; 0x221c <LCD_displayCharacter+0x1cc>
    21fe:	88 ec       	ldi	r24, 0xC8	; 200
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	98 a3       	std	Y+32, r25	; 0x20
    2204:	8f 8f       	std	Y+31, r24	; 0x1f
    2206:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2208:	98 a1       	ldd	r25, Y+32	; 0x20
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <LCD_displayCharacter+0x1ba>
    220e:	98 a3       	std	Y+32, r25	; 0x20
    2210:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2212:	89 a1       	ldd	r24, Y+33	; 0x21
    2214:	9a a1       	ldd	r25, Y+34	; 0x22
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	9a a3       	std	Y+34, r25	; 0x22
    221a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221c:	89 a1       	ldd	r24, Y+33	; 0x21
    221e:	9a a1       	ldd	r25, Y+34	; 0x22
    2220:	00 97       	sbiw	r24, 0x00	; 0
    2222:	69 f7       	brne	.-38     	; 0x21fe <LCD_displayCharacter+0x1ae>
    2224:	14 c0       	rjmp	.+40     	; 0x224e <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2226:	6b a1       	ldd	r22, Y+35	; 0x23
    2228:	7c a1       	ldd	r23, Y+36	; 0x24
    222a:	8d a1       	ldd	r24, Y+37	; 0x25
    222c:	9e a1       	ldd	r25, Y+38	; 0x26
    222e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	9a a3       	std	Y+34, r25	; 0x22
    2238:	89 a3       	std	Y+33, r24	; 0x21
    223a:	89 a1       	ldd	r24, Y+33	; 0x21
    223c:	9a a1       	ldd	r25, Y+34	; 0x22
    223e:	9e 8f       	std	Y+30, r25	; 0x1e
    2240:	8d 8f       	std	Y+29, r24	; 0x1d
    2242:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2244:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	f1 f7       	brne	.-4      	; 0x2246 <LCD_displayCharacter+0x1f6>
    224a:	9e 8f       	std	Y+30, r25	; 0x1e
    224c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    224e:	82 e0       	ldi	r24, 0x02	; 2
    2250:	6a ad       	ldd	r22, Y+58	; 0x3a
    2252:	0e 94 8f 0c 	call	0x191e	; 0x191e <GPIO_writePort>
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	a0 e8       	ldi	r26, 0x80	; 128
    225c:	bf e3       	ldi	r27, 0x3F	; 63
    225e:	89 8f       	std	Y+25, r24	; 0x19
    2260:	9a 8f       	std	Y+26, r25	; 0x1a
    2262:	ab 8f       	std	Y+27, r26	; 0x1b
    2264:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2266:	69 8d       	ldd	r22, Y+25	; 0x19
    2268:	7a 8d       	ldd	r23, Y+26	; 0x1a
    226a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    226c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	4a ef       	ldi	r20, 0xFA	; 250
    2274:	54 e4       	ldi	r21, 0x44	; 68
    2276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	8d 8b       	std	Y+21, r24	; 0x15
    2280:	9e 8b       	std	Y+22, r25	; 0x16
    2282:	af 8b       	std	Y+23, r26	; 0x17
    2284:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2286:	6d 89       	ldd	r22, Y+21	; 0x15
    2288:	7e 89       	ldd	r23, Y+22	; 0x16
    228a:	8f 89       	ldd	r24, Y+23	; 0x17
    228c:	98 8d       	ldd	r25, Y+24	; 0x18
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e8       	ldi	r20, 0x80	; 128
    2294:	5f e3       	ldi	r21, 0x3F	; 63
    2296:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    229a:	88 23       	and	r24, r24
    229c:	2c f4       	brge	.+10     	; 0x22a8 <LCD_displayCharacter+0x258>
		__ticks = 1;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9c 8b       	std	Y+20, r25	; 0x14
    22a4:	8b 8b       	std	Y+19, r24	; 0x13
    22a6:	3f c0       	rjmp	.+126    	; 0x2326 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    22a8:	6d 89       	ldd	r22, Y+21	; 0x15
    22aa:	7e 89       	ldd	r23, Y+22	; 0x16
    22ac:	8f 89       	ldd	r24, Y+23	; 0x17
    22ae:	98 8d       	ldd	r25, Y+24	; 0x18
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	3f ef       	ldi	r19, 0xFF	; 255
    22b4:	4f e7       	ldi	r20, 0x7F	; 127
    22b6:	57 e4       	ldi	r21, 0x47	; 71
    22b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22bc:	18 16       	cp	r1, r24
    22be:	4c f5       	brge	.+82     	; 0x2312 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c0:	69 8d       	ldd	r22, Y+25	; 0x19
    22c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e2       	ldi	r20, 0x20	; 32
    22ce:	51 e4       	ldi	r21, 0x41	; 65
    22d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	bc 01       	movw	r22, r24
    22da:	cd 01       	movw	r24, r26
    22dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	9c 8b       	std	Y+20, r25	; 0x14
    22e6:	8b 8b       	std	Y+19, r24	; 0x13
    22e8:	0f c0       	rjmp	.+30     	; 0x2308 <LCD_displayCharacter+0x2b8>
    22ea:	88 ec       	ldi	r24, 0xC8	; 200
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	9a 8b       	std	Y+18, r25	; 0x12
    22f0:	89 8b       	std	Y+17, r24	; 0x11
    22f2:	89 89       	ldd	r24, Y+17	; 0x11
    22f4:	9a 89       	ldd	r25, Y+18	; 0x12
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	f1 f7       	brne	.-4      	; 0x22f6 <LCD_displayCharacter+0x2a6>
    22fa:	9a 8b       	std	Y+18, r25	; 0x12
    22fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2300:	9c 89       	ldd	r25, Y+20	; 0x14
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	9c 8b       	std	Y+20, r25	; 0x14
    2306:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2308:	8b 89       	ldd	r24, Y+19	; 0x13
    230a:	9c 89       	ldd	r25, Y+20	; 0x14
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	69 f7       	brne	.-38     	; 0x22ea <LCD_displayCharacter+0x29a>
    2310:	14 c0       	rjmp	.+40     	; 0x233a <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2312:	6d 89       	ldd	r22, Y+21	; 0x15
    2314:	7e 89       	ldd	r23, Y+22	; 0x16
    2316:	8f 89       	ldd	r24, Y+23	; 0x17
    2318:	98 8d       	ldd	r25, Y+24	; 0x18
    231a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	9c 8b       	std	Y+20, r25	; 0x14
    2324:	8b 8b       	std	Y+19, r24	; 0x13
    2326:	8b 89       	ldd	r24, Y+19	; 0x13
    2328:	9c 89       	ldd	r25, Y+20	; 0x14
    232a:	98 8b       	std	Y+16, r25	; 0x10
    232c:	8f 87       	std	Y+15, r24	; 0x0f
    232e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2330:	98 89       	ldd	r25, Y+16	; 0x10
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	f1 f7       	brne	.-4      	; 0x2332 <LCD_displayCharacter+0x2e2>
    2336:	98 8b       	std	Y+16, r25	; 0x10
    2338:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	62 e0       	ldi	r22, 0x02	; 2
    233e:	40 e0       	ldi	r20, 0x00	; 0
    2340:	0e 94 c5 0a 	call	0x158a	; 0x158a <GPIO_writePin>
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	a0 e8       	ldi	r26, 0x80	; 128
    234a:	bf e3       	ldi	r27, 0x3F	; 63
    234c:	8b 87       	std	Y+11, r24	; 0x0b
    234e:	9c 87       	std	Y+12, r25	; 0x0c
    2350:	ad 87       	std	Y+13, r26	; 0x0d
    2352:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2354:	6b 85       	ldd	r22, Y+11	; 0x0b
    2356:	7c 85       	ldd	r23, Y+12	; 0x0c
    2358:	8d 85       	ldd	r24, Y+13	; 0x0d
    235a:	9e 85       	ldd	r25, Y+14	; 0x0e
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	4a ef       	ldi	r20, 0xFA	; 250
    2362:	54 e4       	ldi	r21, 0x44	; 68
    2364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	8f 83       	std	Y+7, r24	; 0x07
    236e:	98 87       	std	Y+8, r25	; 0x08
    2370:	a9 87       	std	Y+9, r26	; 0x09
    2372:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2374:	6f 81       	ldd	r22, Y+7	; 0x07
    2376:	78 85       	ldd	r23, Y+8	; 0x08
    2378:	89 85       	ldd	r24, Y+9	; 0x09
    237a:	9a 85       	ldd	r25, Y+10	; 0x0a
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e8       	ldi	r20, 0x80	; 128
    2382:	5f e3       	ldi	r21, 0x3F	; 63
    2384:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2388:	88 23       	and	r24, r24
    238a:	2c f4       	brge	.+10     	; 0x2396 <LCD_displayCharacter+0x346>
		__ticks = 1;
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	9e 83       	std	Y+6, r25	; 0x06
    2392:	8d 83       	std	Y+5, r24	; 0x05
    2394:	3f c0       	rjmp	.+126    	; 0x2414 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    2396:	6f 81       	ldd	r22, Y+7	; 0x07
    2398:	78 85       	ldd	r23, Y+8	; 0x08
    239a:	89 85       	ldd	r24, Y+9	; 0x09
    239c:	9a 85       	ldd	r25, Y+10	; 0x0a
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	3f ef       	ldi	r19, 0xFF	; 255
    23a2:	4f e7       	ldi	r20, 0x7F	; 127
    23a4:	57 e4       	ldi	r21, 0x47	; 71
    23a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23aa:	18 16       	cp	r1, r24
    23ac:	4c f5       	brge	.+82     	; 0x2400 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    23b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e2       	ldi	r20, 0x20	; 32
    23bc:	51 e4       	ldi	r21, 0x41	; 65
    23be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	bc 01       	movw	r22, r24
    23c8:	cd 01       	movw	r24, r26
    23ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	9e 83       	std	Y+6, r25	; 0x06
    23d4:	8d 83       	std	Y+5, r24	; 0x05
    23d6:	0f c0       	rjmp	.+30     	; 0x23f6 <LCD_displayCharacter+0x3a6>
    23d8:	88 ec       	ldi	r24, 0xC8	; 200
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	9c 83       	std	Y+4, r25	; 0x04
    23de:	8b 83       	std	Y+3, r24	; 0x03
    23e0:	8b 81       	ldd	r24, Y+3	; 0x03
    23e2:	9c 81       	ldd	r25, Y+4	; 0x04
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	f1 f7       	brne	.-4      	; 0x23e4 <LCD_displayCharacter+0x394>
    23e8:	9c 83       	std	Y+4, r25	; 0x04
    23ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ec:	8d 81       	ldd	r24, Y+5	; 0x05
    23ee:	9e 81       	ldd	r25, Y+6	; 0x06
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	9e 83       	std	Y+6, r25	; 0x06
    23f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f6:	8d 81       	ldd	r24, Y+5	; 0x05
    23f8:	9e 81       	ldd	r25, Y+6	; 0x06
    23fa:	00 97       	sbiw	r24, 0x00	; 0
    23fc:	69 f7       	brne	.-38     	; 0x23d8 <LCD_displayCharacter+0x388>
    23fe:	14 c0       	rjmp	.+40     	; 0x2428 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2400:	6f 81       	ldd	r22, Y+7	; 0x07
    2402:	78 85       	ldd	r23, Y+8	; 0x08
    2404:	89 85       	ldd	r24, Y+9	; 0x09
    2406:	9a 85       	ldd	r25, Y+10	; 0x0a
    2408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	9e 83       	std	Y+6, r25	; 0x06
    2412:	8d 83       	std	Y+5, r24	; 0x05
    2414:	8d 81       	ldd	r24, Y+5	; 0x05
    2416:	9e 81       	ldd	r25, Y+6	; 0x06
    2418:	9a 83       	std	Y+2, r25	; 0x02
    241a:	89 83       	std	Y+1, r24	; 0x01
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	9a 81       	ldd	r25, Y+2	; 0x02
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	f1 f7       	brne	.-4      	; 0x2420 <LCD_displayCharacter+0x3d0>
    2424:	9a 83       	std	Y+2, r25	; 0x02
    2426:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2428:	ea 96       	adiw	r28, 0x3a	; 58
    242a:	0f b6       	in	r0, 0x3f	; 63
    242c:	f8 94       	cli
    242e:	de bf       	out	0x3e, r29	; 62
    2430:	0f be       	out	0x3f, r0	; 63
    2432:	cd bf       	out	0x3d, r28	; 61
    2434:	cf 91       	pop	r28
    2436:	df 91       	pop	r29
    2438:	08 95       	ret

0000243a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    243a:	df 93       	push	r29
    243c:	cf 93       	push	r28
    243e:	00 d0       	rcall	.+0      	; 0x2440 <LCD_displayString+0x6>
    2440:	0f 92       	push	r0
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	9b 83       	std	Y+3, r25	; 0x03
    2448:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    244a:	19 82       	std	Y+1, r1	; 0x01
    244c:	0e c0       	rjmp	.+28     	; 0x246a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	28 2f       	mov	r18, r24
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	8a 81       	ldd	r24, Y+2	; 0x02
    2456:	9b 81       	ldd	r25, Y+3	; 0x03
    2458:	fc 01       	movw	r30, r24
    245a:	e2 0f       	add	r30, r18
    245c:	f3 1f       	adc	r31, r19
    245e:	80 81       	ld	r24, Z
    2460:	0e 94 28 10 	call	0x2050	; 0x2050 <LCD_displayCharacter>
		i++;
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	8f 5f       	subi	r24, 0xFF	; 255
    2468:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	28 2f       	mov	r18, r24
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	8a 81       	ldd	r24, Y+2	; 0x02
    2472:	9b 81       	ldd	r25, Y+3	; 0x03
    2474:	fc 01       	movw	r30, r24
    2476:	e2 0f       	add	r30, r18
    2478:	f3 1f       	adc	r31, r19
    247a:	80 81       	ld	r24, Z
    247c:	88 23       	and	r24, r24
    247e:	39 f7       	brne	.-50     	; 0x244e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2480:	0f 90       	pop	r0
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	08 95       	ret

0000248c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	00 d0       	rcall	.+0      	; 0x2492 <LCD_moveCursor+0x6>
    2492:	00 d0       	rcall	.+0      	; 0x2494 <LCD_moveCursor+0x8>
    2494:	0f 92       	push	r0
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
    249a:	8a 83       	std	Y+2, r24	; 0x02
    249c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    249e:	8a 81       	ldd	r24, Y+2	; 0x02
    24a0:	28 2f       	mov	r18, r24
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	3d 83       	std	Y+5, r19	; 0x05
    24a6:	2c 83       	std	Y+4, r18	; 0x04
    24a8:	8c 81       	ldd	r24, Y+4	; 0x04
    24aa:	9d 81       	ldd	r25, Y+5	; 0x05
    24ac:	81 30       	cpi	r24, 0x01	; 1
    24ae:	91 05       	cpc	r25, r1
    24b0:	c1 f0       	breq	.+48     	; 0x24e2 <LCD_moveCursor+0x56>
    24b2:	2c 81       	ldd	r18, Y+4	; 0x04
    24b4:	3d 81       	ldd	r19, Y+5	; 0x05
    24b6:	22 30       	cpi	r18, 0x02	; 2
    24b8:	31 05       	cpc	r19, r1
    24ba:	2c f4       	brge	.+10     	; 0x24c6 <LCD_moveCursor+0x3a>
    24bc:	8c 81       	ldd	r24, Y+4	; 0x04
    24be:	9d 81       	ldd	r25, Y+5	; 0x05
    24c0:	00 97       	sbiw	r24, 0x00	; 0
    24c2:	61 f0       	breq	.+24     	; 0x24dc <LCD_moveCursor+0x50>
    24c4:	19 c0       	rjmp	.+50     	; 0x24f8 <LCD_moveCursor+0x6c>
    24c6:	2c 81       	ldd	r18, Y+4	; 0x04
    24c8:	3d 81       	ldd	r19, Y+5	; 0x05
    24ca:	22 30       	cpi	r18, 0x02	; 2
    24cc:	31 05       	cpc	r19, r1
    24ce:	69 f0       	breq	.+26     	; 0x24ea <LCD_moveCursor+0x5e>
    24d0:	8c 81       	ldd	r24, Y+4	; 0x04
    24d2:	9d 81       	ldd	r25, Y+5	; 0x05
    24d4:	83 30       	cpi	r24, 0x03	; 3
    24d6:	91 05       	cpc	r25, r1
    24d8:	61 f0       	breq	.+24     	; 0x24f2 <LCD_moveCursor+0x66>
    24da:	0e c0       	rjmp	.+28     	; 0x24f8 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    24dc:	8b 81       	ldd	r24, Y+3	; 0x03
    24de:	89 83       	std	Y+1, r24	; 0x01
    24e0:	0b c0       	rjmp	.+22     	; 0x24f8 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	80 5c       	subi	r24, 0xC0	; 192
    24e6:	89 83       	std	Y+1, r24	; 0x01
    24e8:	07 c0       	rjmp	.+14     	; 0x24f8 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	80 5f       	subi	r24, 0xF0	; 240
    24ee:	89 83       	std	Y+1, r24	; 0x01
    24f0:	03 c0       	rjmp	.+6      	; 0x24f8 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    24f2:	8b 81       	ldd	r24, Y+3	; 0x03
    24f4:	80 5b       	subi	r24, 0xB0	; 176
    24f6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	80 68       	ori	r24, 0x80	; 128
    24fc:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <LCD_sendCommand>
}
    2500:	0f 90       	pop	r0
    2502:	0f 90       	pop	r0
    2504:	0f 90       	pop	r0
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	cf 91       	pop	r28
    250c:	df 91       	pop	r29
    250e:	08 95       	ret

00002510 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2510:	df 93       	push	r29
    2512:	cf 93       	push	r28
    2514:	00 d0       	rcall	.+0      	; 0x2516 <LCD_displayStringRowColumn+0x6>
    2516:	00 d0       	rcall	.+0      	; 0x2518 <LCD_displayStringRowColumn+0x8>
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62
    251c:	89 83       	std	Y+1, r24	; 0x01
    251e:	6a 83       	std	Y+2, r22	; 0x02
    2520:	5c 83       	std	Y+4, r21	; 0x04
    2522:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	6a 81       	ldd	r22, Y+2	; 0x02
    2528:	0e 94 46 12 	call	0x248c	; 0x248c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	9c 81       	ldd	r25, Y+4	; 0x04
    2530:	0e 94 1d 12 	call	0x243a	; 0x243a <LCD_displayString>
}
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	0f 90       	pop	r0
    253a:	0f 90       	pop	r0
    253c:	cf 91       	pop	r28
    253e:	df 91       	pop	r29
    2540:	08 95       	ret

00002542 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2542:	df 93       	push	r29
    2544:	cf 93       	push	r28
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	62 97       	sbiw	r28, 0x12	; 18
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	9a 8b       	std	Y+18, r25	; 0x12
    2558:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    255a:	89 89       	ldd	r24, Y+17	; 0x11
    255c:	9a 89       	ldd	r25, Y+18	; 0x12
    255e:	9e 01       	movw	r18, r28
    2560:	2f 5f       	subi	r18, 0xFF	; 255
    2562:	3f 4f       	sbci	r19, 0xFF	; 255
    2564:	b9 01       	movw	r22, r18
    2566:	4a e0       	ldi	r20, 0x0A	; 10
    2568:	50 e0       	ldi	r21, 0x00	; 0
    256a:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <itoa>
   LCD_displayString(buff); /* Display the string */
    256e:	ce 01       	movw	r24, r28
    2570:	01 96       	adiw	r24, 0x01	; 1
    2572:	0e 94 1d 12 	call	0x243a	; 0x243a <LCD_displayString>
}
    2576:	62 96       	adiw	r28, 0x12	; 18
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	de bf       	out	0x3e, r29	; 62
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	cd bf       	out	0x3d, r28	; 61
    2582:	cf 91       	pop	r28
    2584:	df 91       	pop	r29
    2586:	08 95       	ret

00002588 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2588:	df 93       	push	r29
    258a:	cf 93       	push	r28
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <LCD_sendCommand>
}
    2596:	cf 91       	pop	r28
    2598:	df 91       	pop	r29
    259a:	08 95       	ret

0000259c <__vector_9>:
#include "timer0.h"
#include "gpio.h"
#include <util/delay.h>
static volatile void (*g_callBackPtr)(void) = NULL_PTR;
ISR(TIMER0_OVF_vect)
{
    259c:	1f 92       	push	r1
    259e:	0f 92       	push	r0
    25a0:	0f b6       	in	r0, 0x3f	; 63
    25a2:	0f 92       	push	r0
    25a4:	11 24       	eor	r1, r1
    25a6:	2f 93       	push	r18
    25a8:	3f 93       	push	r19
    25aa:	4f 93       	push	r20
    25ac:	5f 93       	push	r21
    25ae:	6f 93       	push	r22
    25b0:	7f 93       	push	r23
    25b2:	8f 93       	push	r24
    25b4:	9f 93       	push	r25
    25b6:	af 93       	push	r26
    25b8:	bf 93       	push	r27
    25ba:	ef 93       	push	r30
    25bc:	ff 93       	push	r31
    25be:	df 93       	push	r29
    25c0:	cf 93       	push	r28
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62


	if(g_callBackPtr != NULL_PTR)
    25c6:	80 91 3e 01 	lds	r24, 0x013E
    25ca:	90 91 3f 01 	lds	r25, 0x013F
    25ce:	00 97       	sbiw	r24, 0x00	; 0
    25d0:	29 f0       	breq	.+10     	; 0x25dc <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after overflow occures */
		(*g_callBackPtr)();
    25d2:	e0 91 3e 01 	lds	r30, 0x013E
    25d6:	f0 91 3f 01 	lds	r31, 0x013F
    25da:	09 95       	icall
	}

}
    25dc:	cf 91       	pop	r28
    25de:	df 91       	pop	r29
    25e0:	ff 91       	pop	r31
    25e2:	ef 91       	pop	r30
    25e4:	bf 91       	pop	r27
    25e6:	af 91       	pop	r26
    25e8:	9f 91       	pop	r25
    25ea:	8f 91       	pop	r24
    25ec:	7f 91       	pop	r23
    25ee:	6f 91       	pop	r22
    25f0:	5f 91       	pop	r21
    25f2:	4f 91       	pop	r20
    25f4:	3f 91       	pop	r19
    25f6:	2f 91       	pop	r18
    25f8:	0f 90       	pop	r0
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	0f 90       	pop	r0
    25fe:	1f 90       	pop	r1
    2600:	18 95       	reti

00002602 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    2602:	1f 92       	push	r1
    2604:	0f 92       	push	r0
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	0f 92       	push	r0
    260a:	11 24       	eor	r1, r1
    260c:	2f 93       	push	r18
    260e:	3f 93       	push	r19
    2610:	4f 93       	push	r20
    2612:	5f 93       	push	r21
    2614:	6f 93       	push	r22
    2616:	7f 93       	push	r23
    2618:	8f 93       	push	r24
    261a:	9f 93       	push	r25
    261c:	af 93       	push	r26
    261e:	bf 93       	push	r27
    2620:	ef 93       	push	r30
    2622:	ff 93       	push	r31
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    262c:	80 91 3e 01 	lds	r24, 0x013E
    2630:	90 91 3f 01 	lds	r25, 0x013F
    2634:	00 97       	sbiw	r24, 0x00	; 0
    2636:	29 f0       	breq	.+10     	; 0x2642 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after compare value reached */
		(*g_callBackPtr)();
    2638:	e0 91 3e 01 	lds	r30, 0x013E
    263c:	f0 91 3f 01 	lds	r31, 0x013F
    2640:	09 95       	icall
	}
}
    2642:	cf 91       	pop	r28
    2644:	df 91       	pop	r29
    2646:	ff 91       	pop	r31
    2648:	ef 91       	pop	r30
    264a:	bf 91       	pop	r27
    264c:	af 91       	pop	r26
    264e:	9f 91       	pop	r25
    2650:	8f 91       	pop	r24
    2652:	7f 91       	pop	r23
    2654:	6f 91       	pop	r22
    2656:	5f 91       	pop	r21
    2658:	4f 91       	pop	r20
    265a:	3f 91       	pop	r19
    265c:	2f 91       	pop	r18
    265e:	0f 90       	pop	r0
    2660:	0f be       	out	0x3f, r0	; 63
    2662:	0f 90       	pop	r0
    2664:	1f 90       	pop	r1
    2666:	18 95       	reti

00002668 <TIMER0_init>:
 * 2- clear value of TCNT0 register
 * 3- Set interrupts flag
 * 4- set WGM01BIT in register TCCR0 to declare compare mode
 */
void TIMER0_init(const TIMER_ConfigType * Config_Ptr)
{
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	00 d0       	rcall	.+0      	; 0x266e <TIMER0_init+0x6>
    266e:	cd b7       	in	r28, 0x3d	; 61
    2670:	de b7       	in	r29, 0x3e	; 62
    2672:	9a 83       	std	Y+2, r25	; 0x02
    2674:	89 83       	std	Y+1, r24	; 0x01

	if(((Config_Ptr->timermode0)!=PWM0)&&((Config_Ptr->timermode0)!=FAST_PWM0))
    2676:	e9 81       	ldd	r30, Y+1	; 0x01
    2678:	fa 81       	ldd	r31, Y+2	; 0x02
    267a:	80 81       	ld	r24, Z
    267c:	81 30       	cpi	r24, 0x01	; 1
    267e:	09 f4       	brne	.+2      	; 0x2682 <TIMER0_init+0x1a>
    2680:	57 c0       	rjmp	.+174    	; 0x2730 <TIMER0_init+0xc8>
    2682:	e9 81       	ldd	r30, Y+1	; 0x01
    2684:	fa 81       	ldd	r31, Y+2	; 0x02
    2686:	80 81       	ld	r24, Z
    2688:	83 30       	cpi	r24, 0x03	; 3
    268a:	09 f4       	brne	.+2      	; 0x268e <TIMER0_init+0x26>
    268c:	51 c0       	rjmp	.+162    	; 0x2730 <TIMER0_init+0xc8>
	{
		TCNT0=Config_Ptr->INITVALUE;
    268e:	a2 e5       	ldi	r26, 0x52	; 82
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	e9 81       	ldd	r30, Y+1	; 0x01
    2694:	fa 81       	ldd	r31, Y+2	; 0x02
    2696:	81 81       	ldd	r24, Z+1	; 0x01
    2698:	8c 93       	st	X, r24
			TCCR0=(TCCR0 & 0XF8)|(0X07 & Config_Ptr->PRESCALER0);
    269a:	a3 e5       	ldi	r26, 0x53	; 83
    269c:	b0 e0       	ldi	r27, 0x00	; 0
    269e:	e3 e5       	ldi	r30, 0x53	; 83
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	80 81       	ld	r24, Z
    26a4:	98 2f       	mov	r25, r24
    26a6:	98 7f       	andi	r25, 0xF8	; 248
    26a8:	e9 81       	ldd	r30, Y+1	; 0x01
    26aa:	fa 81       	ldd	r31, Y+2	; 0x02
    26ac:	83 81       	ldd	r24, Z+3	; 0x03
    26ae:	87 70       	andi	r24, 0x07	; 7
    26b0:	89 2b       	or	r24, r25
    26b2:	8c 93       	st	X, r24
		SET_BIT(TCCR0,FOC0);
    26b4:	a3 e5       	ldi	r26, 0x53	; 83
    26b6:	b0 e0       	ldi	r27, 0x00	; 0
    26b8:	e3 e5       	ldi	r30, 0x53	; 83
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	80 81       	ld	r24, Z
    26be:	80 68       	ori	r24, 0x80	; 128
    26c0:	8c 93       	st	X, r24
		if((Config_Ptr->timermode0)==COMPARE0)
    26c2:	e9 81       	ldd	r30, Y+1	; 0x01
    26c4:	fa 81       	ldd	r31, Y+2	; 0x02
    26c6:	80 81       	ld	r24, Z
    26c8:	82 30       	cpi	r24, 0x02	; 2
    26ca:	e1 f4       	brne	.+56     	; 0x2704 <TIMER0_init+0x9c>
		{
			SET_BIT(TCCR0,WGM01);
    26cc:	a3 e5       	ldi	r26, 0x53	; 83
    26ce:	b0 e0       	ldi	r27, 0x00	; 0
    26d0:	e3 e5       	ldi	r30, 0x53	; 83
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	88 60       	ori	r24, 0x08	; 8
    26d8:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,WGM00);
    26da:	a3 e5       	ldi	r26, 0x53	; 83
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	e3 e5       	ldi	r30, 0x53	; 83
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	8f 7b       	andi	r24, 0xBF	; 191
    26e6:	8c 93       	st	X, r24
			OCR0=Config_Ptr->COMPAREVALUE;
    26e8:	ac e5       	ldi	r26, 0x5C	; 92
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	e9 81       	ldd	r30, Y+1	; 0x01
    26ee:	fa 81       	ldd	r31, Y+2	; 0x02
    26f0:	82 81       	ldd	r24, Z+2	; 0x02
    26f2:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE0);
    26f4:	a9 e5       	ldi	r26, 0x59	; 89
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	e9 e5       	ldi	r30, 0x59	; 89
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	82 60       	ori	r24, 0x02	; 2
    2700:	8c 93       	st	X, r24
    2702:	46 c0       	rjmp	.+140    	; 0x2790 <TIMER0_init+0x128>
		}
		else
		{
			CLEAR_BIT(TCCR0,WGM00);
    2704:	a3 e5       	ldi	r26, 0x53	; 83
    2706:	b0 e0       	ldi	r27, 0x00	; 0
    2708:	e3 e5       	ldi	r30, 0x53	; 83
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	80 81       	ld	r24, Z
    270e:	8f 7b       	andi	r24, 0xBF	; 191
    2710:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,WGM01);
    2712:	a3 e5       	ldi	r26, 0x53	; 83
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	e3 e5       	ldi	r30, 0x53	; 83
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	80 81       	ld	r24, Z
    271c:	87 7f       	andi	r24, 0xF7	; 247
    271e:	8c 93       	st	X, r24
			SET_BIT(TIMSK,TOIE0);
    2720:	a9 e5       	ldi	r26, 0x59	; 89
    2722:	b0 e0       	ldi	r27, 0x00	; 0
    2724:	e9 e5       	ldi	r30, 0x59	; 89
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	80 81       	ld	r24, Z
    272a:	81 60       	ori	r24, 0x01	; 1
    272c:	8c 93       	st	X, r24
    272e:	30 c0       	rjmp	.+96     	; 0x2790 <TIMER0_init+0x128>
		}

	}
	else
	{
		SET_BIT(TCCR0,COM01);
    2730:	a3 e5       	ldi	r26, 0x53	; 83
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	e3 e5       	ldi	r30, 0x53	; 83
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	80 62       	ori	r24, 0x20	; 32
    273c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,COM00);
    273e:	a3 e5       	ldi	r26, 0x53	; 83
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	e3 e5       	ldi	r30, 0x53	; 83
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	8f 7e       	andi	r24, 0xEF	; 239
    274a:	8c 93       	st	X, r24
		if((Config_Ptr->timermode0)==1)
    274c:	e9 81       	ldd	r30, Y+1	; 0x01
    274e:	fa 81       	ldd	r31, Y+2	; 0x02
    2750:	80 81       	ld	r24, Z
    2752:	81 30       	cpi	r24, 0x01	; 1
    2754:	79 f4       	brne	.+30     	; 0x2774 <TIMER0_init+0x10c>
		{
			SET_BIT(TCCR0,WGM00);
    2756:	a3 e5       	ldi	r26, 0x53	; 83
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e3 e5       	ldi	r30, 0x53	; 83
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	80 64       	ori	r24, 0x40	; 64
    2762:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,WGM01);
    2764:	a3 e5       	ldi	r26, 0x53	; 83
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	e3 e5       	ldi	r30, 0x53	; 83
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	87 7f       	andi	r24, 0xF7	; 247
    2770:	8c 93       	st	X, r24
    2772:	0e c0       	rjmp	.+28     	; 0x2790 <TIMER0_init+0x128>
		}
		else{

			SET_BIT(TCCR0,WGM01);
    2774:	a3 e5       	ldi	r26, 0x53	; 83
    2776:	b0 e0       	ldi	r27, 0x00	; 0
    2778:	e3 e5       	ldi	r30, 0x53	; 83
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	80 81       	ld	r24, Z
    277e:	88 60       	ori	r24, 0x08	; 8
    2780:	8c 93       	st	X, r24
			SET_BIT(TCCR0,WGM00);
    2782:	a3 e5       	ldi	r26, 0x53	; 83
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	e3 e5       	ldi	r30, 0x53	; 83
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	80 64       	ori	r24, 0x40	; 64
    278e:	8c 93       	st	X, r24
		}
		}

}
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <TIMER0_setCallBack>:
/*
 * Function to store callback function from main system
 */
void TIMER0_setCallBack(void(*a_ptr)(void))
{
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	00 d0       	rcall	.+0      	; 0x27a0 <TIMER0_setCallBack+0x6>
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
    27a4:	9a 83       	std	Y+2, r25	; 0x02
    27a6:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	9a 81       	ldd	r25, Y+2	; 0x02
    27ac:	90 93 3f 01 	sts	0x013F, r25
    27b0:	80 93 3e 01 	sts	0x013E, r24
}
    27b4:	0f 90       	pop	r0
    27b6:	0f 90       	pop	r0
    27b8:	cf 91       	pop	r28
    27ba:	df 91       	pop	r29
    27bc:	08 95       	ret

000027be <TIMER0_deInit>:
/*
 * Function to deinitialize timer0 and clear its registers
 * and also clear interrupt flag
 */
void TIMER0_deInit()
{
    27be:	df 93       	push	r29
    27c0:	cf 93       	push	r28
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
	TCCR0=(TCCR0 & 0XF8);// stop the timer
    27c6:	a3 e5       	ldi	r26, 0x53	; 83
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	e3 e5       	ldi	r30, 0x53	; 83
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	88 7f       	andi	r24, 0xF8	; 248
    27d2:	8c 93       	st	X, r24
	TIMSK &= ~(1<<TOIE0); // disable Timer0 Overflow Interrupt
    27d4:	a9 e5       	ldi	r26, 0x59	; 89
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	e9 e5       	ldi	r30, 0x59	; 89
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	8e 7f       	andi	r24, 0xFE	; 254
    27e0:	8c 93       	st	X, r24
	TIMSK &= ~(1<<OCIE0);// disable Timer0 Compare Interrupt
    27e2:	a9 e5       	ldi	r26, 0x59	; 89
    27e4:	b0 e0       	ldi	r27, 0x00	; 0
    27e6:	e9 e5       	ldi	r30, 0x59	; 89
    27e8:	f0 e0       	ldi	r31, 0x00	; 0
    27ea:	80 81       	ld	r24, Z
    27ec:	8d 7f       	andi	r24, 0xFD	; 253
    27ee:	8c 93       	st	X, r24

}
    27f0:	cf 91       	pop	r28
    27f2:	df 91       	pop	r29
    27f4:	08 95       	ret

000027f6 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <UART_init+0x6>
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <UART_init+0x8>
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	9c 83       	std	Y+4, r25	; 0x04
    2804:	8b 83       	std	Y+3, r24	; 0x03
	/* Calculate the UBRR register value */
	uint16 ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2806:	eb 81       	ldd	r30, Y+3	; 0x03
    2808:	fc 81       	ldd	r31, Y+4	; 0x04
    280a:	80 81       	ld	r24, Z
    280c:	91 81       	ldd	r25, Z+1	; 0x01
    280e:	a2 81       	ldd	r26, Z+2	; 0x02
    2810:	b3 81       	ldd	r27, Z+3	; 0x03
    2812:	88 0f       	add	r24, r24
    2814:	99 1f       	adc	r25, r25
    2816:	aa 1f       	adc	r26, r26
    2818:	bb 1f       	adc	r27, r27
    281a:	88 0f       	add	r24, r24
    281c:	99 1f       	adc	r25, r25
    281e:	aa 1f       	adc	r26, r26
    2820:	bb 1f       	adc	r27, r27
    2822:	88 0f       	add	r24, r24
    2824:	99 1f       	adc	r25, r25
    2826:	aa 1f       	adc	r26, r26
    2828:	bb 1f       	adc	r27, r27
    282a:	9c 01       	movw	r18, r24
    282c:	ad 01       	movw	r20, r26
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	92 e1       	ldi	r25, 0x12	; 18
    2832:	aa e7       	ldi	r26, 0x7A	; 122
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	bc 01       	movw	r22, r24
    2838:	cd 01       	movw	r24, r26
    283a:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__udivmodsi4>
    283e:	da 01       	movw	r26, r20
    2840:	c9 01       	movw	r24, r18
    2842:	01 97       	sbiw	r24, 0x01	; 1
    2844:	9a 83       	std	Y+2, r25	; 0x02
    2846:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2848:	e0 e4       	ldi	r30, 0x40	; 64
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	9a 81       	ldd	r25, Y+2	; 0x02
    2850:	89 2f       	mov	r24, r25
    2852:	99 27       	eor	r25, r25
    2854:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2856:	e9 e2       	ldi	r30, 0x29	; 41
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	80 83       	st	Z, r24

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    285e:	eb e2       	ldi	r30, 0x2B	; 43
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	82 e0       	ldi	r24, 0x02	; 2
    2864:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2866:	ea e2       	ldi	r30, 0x2A	; 42
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	88 e1       	ldi	r24, 0x18	; 24
    286c:	80 83       	st	Z, r24
	UCSRB=(UCSRB& 0XFB)|((Config_Ptr->CHARSIZE)&0x04);
    286e:	aa e2       	ldi	r26, 0x2A	; 42
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	ea e2       	ldi	r30, 0x2A	; 42
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	98 2f       	mov	r25, r24
    287a:	9b 7f       	andi	r25, 0xFB	; 251
    287c:	eb 81       	ldd	r30, Y+3	; 0x03
    287e:	fc 81       	ldd	r31, Y+4	; 0x04
    2880:	84 81       	ldd	r24, Z+4	; 0x04
    2882:	84 70       	andi	r24, 0x04	; 4
    2884:	89 2b       	or	r24, r25
    2886:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    2888:	e0 e4       	ldi	r30, 0x40	; 64
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 e8       	ldi	r24, 0x80	; 128
    288e:	80 83       	st	Z, r24
	UCSRC = (UCSRC&0XF9)| (((Config_Ptr->CHARSIZE)&0X03)<<1);
    2890:	a0 e4       	ldi	r26, 0x40	; 64
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	e0 e4       	ldi	r30, 0x40	; 64
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	28 2f       	mov	r18, r24
    289c:	29 7f       	andi	r18, 0xF9	; 249
    289e:	eb 81       	ldd	r30, Y+3	; 0x03
    28a0:	fc 81       	ldd	r31, Y+4	; 0x04
    28a2:	84 81       	ldd	r24, Z+4	; 0x04
    28a4:	88 2f       	mov	r24, r24
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	83 70       	andi	r24, 0x03	; 3
    28aa:	90 70       	andi	r25, 0x00	; 0
    28ac:	88 0f       	add	r24, r24
    28ae:	99 1f       	adc	r25, r25
    28b0:	82 2b       	or	r24, r18
    28b2:	8c 93       	st	X, r24
	UCSRC = (UCSRC&0XCF)| ((Config_Ptr->PARITY)<<4);
    28b4:	a0 e4       	ldi	r26, 0x40	; 64
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	e0 e4       	ldi	r30, 0x40	; 64
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	80 81       	ld	r24, Z
    28be:	28 2f       	mov	r18, r24
    28c0:	2f 7c       	andi	r18, 0xCF	; 207
    28c2:	eb 81       	ldd	r30, Y+3	; 0x03
    28c4:	fc 81       	ldd	r31, Y+4	; 0x04
    28c6:	85 81       	ldd	r24, Z+5	; 0x05
    28c8:	88 2f       	mov	r24, r24
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	82 95       	swap	r24
    28ce:	92 95       	swap	r25
    28d0:	90 7f       	andi	r25, 0xF0	; 240
    28d2:	98 27       	eor	r25, r24
    28d4:	80 7f       	andi	r24, 0xF0	; 240
    28d6:	98 27       	eor	r25, r24
    28d8:	82 2b       	or	r24, r18
    28da:	8c 93       	st	X, r24
	UCSRC = (UCSRC&0XF7)|((Config_Ptr->stopbit)<<3);
    28dc:	a0 e4       	ldi	r26, 0x40	; 64
    28de:	b0 e0       	ldi	r27, 0x00	; 0
    28e0:	e0 e4       	ldi	r30, 0x40	; 64
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	80 81       	ld	r24, Z
    28e6:	28 2f       	mov	r18, r24
    28e8:	27 7f       	andi	r18, 0xF7	; 247
    28ea:	eb 81       	ldd	r30, Y+3	; 0x03
    28ec:	fc 81       	ldd	r31, Y+4	; 0x04
    28ee:	86 81       	ldd	r24, Z+6	; 0x06
    28f0:	88 2f       	mov	r24, r24
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	88 0f       	add	r24, r24
    28f6:	99 1f       	adc	r25, r25
    28f8:	88 0f       	add	r24, r24
    28fa:	99 1f       	adc	r25, r25
    28fc:	88 0f       	add	r24, r24
    28fe:	99 1f       	adc	r25, r25
    2900:	82 2b       	or	r24, r18
    2902:	8c 93       	st	X, r24
}
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	cf 91       	pop	r28
    290e:	df 91       	pop	r29
    2910:	08 95       	ret

00002912 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	0f 92       	push	r0
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
    291c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    291e:	eb e2       	ldi	r30, 0x2B	; 43
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	80 81       	ld	r24, Z
    2924:	88 2f       	mov	r24, r24
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	80 72       	andi	r24, 0x20	; 32
    292a:	90 70       	andi	r25, 0x00	; 0
    292c:	00 97       	sbiw	r24, 0x00	; 0
    292e:	b9 f3       	breq	.-18     	; 0x291e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2930:	ec e2       	ldi	r30, 0x2C	; 44
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	89 81       	ldd	r24, Y+1	; 0x01
    2936:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2938:	0f 90       	pop	r0
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	08 95       	ret

00002940 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2940:	df 93       	push	r29
    2942:	cf 93       	push	r28
    2944:	cd b7       	in	r28, 0x3d	; 61
    2946:	de b7       	in	r29, 0x3e	; 62
    2948:	2e 97       	sbiw	r28, 0x0e	; 14
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	f8 94       	cli
    294e:	de bf       	out	0x3e, r29	; 62
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	cd bf       	out	0x3d, r28	; 61
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	aa ef       	ldi	r26, 0xFA	; 250
    295a:	b4 e4       	ldi	r27, 0x44	; 68
    295c:	8b 87       	std	Y+11, r24	; 0x0b
    295e:	9c 87       	std	Y+12, r25	; 0x0c
    2960:	ad 87       	std	Y+13, r26	; 0x0d
    2962:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2964:	6b 85       	ldd	r22, Y+11	; 0x0b
    2966:	7c 85       	ldd	r23, Y+12	; 0x0c
    2968:	8d 85       	ldd	r24, Y+13	; 0x0d
    296a:	9e 85       	ldd	r25, Y+14	; 0x0e
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	4a ef       	ldi	r20, 0xFA	; 250
    2972:	54 e4       	ldi	r21, 0x44	; 68
    2974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	8f 83       	std	Y+7, r24	; 0x07
    297e:	98 87       	std	Y+8, r25	; 0x08
    2980:	a9 87       	std	Y+9, r26	; 0x09
    2982:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2984:	6f 81       	ldd	r22, Y+7	; 0x07
    2986:	78 85       	ldd	r23, Y+8	; 0x08
    2988:	89 85       	ldd	r24, Y+9	; 0x09
    298a:	9a 85       	ldd	r25, Y+10	; 0x0a
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	40 e8       	ldi	r20, 0x80	; 128
    2992:	5f e3       	ldi	r21, 0x3F	; 63
    2994:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2998:	88 23       	and	r24, r24
    299a:	2c f4       	brge	.+10     	; 0x29a6 <UART_recieveByte+0x66>
		__ticks = 1;
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	9e 83       	std	Y+6, r25	; 0x06
    29a2:	8d 83       	std	Y+5, r24	; 0x05
    29a4:	3f c0       	rjmp	.+126    	; 0x2a24 <UART_recieveByte+0xe4>
	else if (__tmp > 65535)
    29a6:	6f 81       	ldd	r22, Y+7	; 0x07
    29a8:	78 85       	ldd	r23, Y+8	; 0x08
    29aa:	89 85       	ldd	r24, Y+9	; 0x09
    29ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	3f ef       	ldi	r19, 0xFF	; 255
    29b2:	4f e7       	ldi	r20, 0x7F	; 127
    29b4:	57 e4       	ldi	r21, 0x47	; 71
    29b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ba:	18 16       	cp	r1, r24
    29bc:	4c f5       	brge	.+82     	; 0x2a10 <UART_recieveByte+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29be:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	40 e2       	ldi	r20, 0x20	; 32
    29cc:	51 e4       	ldi	r21, 0x41	; 65
    29ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	bc 01       	movw	r22, r24
    29d8:	cd 01       	movw	r24, r26
    29da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	9e 83       	std	Y+6, r25	; 0x06
    29e4:	8d 83       	std	Y+5, r24	; 0x05
    29e6:	0f c0       	rjmp	.+30     	; 0x2a06 <UART_recieveByte+0xc6>
    29e8:	88 ec       	ldi	r24, 0xC8	; 200
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	9c 83       	std	Y+4, r25	; 0x04
    29ee:	8b 83       	std	Y+3, r24	; 0x03
    29f0:	8b 81       	ldd	r24, Y+3	; 0x03
    29f2:	9c 81       	ldd	r25, Y+4	; 0x04
    29f4:	01 97       	sbiw	r24, 0x01	; 1
    29f6:	f1 f7       	brne	.-4      	; 0x29f4 <UART_recieveByte+0xb4>
    29f8:	9c 83       	std	Y+4, r25	; 0x04
    29fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29fc:	8d 81       	ldd	r24, Y+5	; 0x05
    29fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2a00:	01 97       	sbiw	r24, 0x01	; 1
    2a02:	9e 83       	std	Y+6, r25	; 0x06
    2a04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a06:	8d 81       	ldd	r24, Y+5	; 0x05
    2a08:	9e 81       	ldd	r25, Y+6	; 0x06
    2a0a:	00 97       	sbiw	r24, 0x00	; 0
    2a0c:	69 f7       	brne	.-38     	; 0x29e8 <UART_recieveByte+0xa8>
    2a0e:	14 c0       	rjmp	.+40     	; 0x2a38 <UART_recieveByte+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a10:	6f 81       	ldd	r22, Y+7	; 0x07
    2a12:	78 85       	ldd	r23, Y+8	; 0x08
    2a14:	89 85       	ldd	r24, Y+9	; 0x09
    2a16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	9e 83       	std	Y+6, r25	; 0x06
    2a22:	8d 83       	std	Y+5, r24	; 0x05
    2a24:	8d 81       	ldd	r24, Y+5	; 0x05
    2a26:	9e 81       	ldd	r25, Y+6	; 0x06
    2a28:	9a 83       	std	Y+2, r25	; 0x02
    2a2a:	89 83       	std	Y+1, r24	; 0x01
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	f1 f7       	brne	.-4      	; 0x2a30 <UART_recieveByte+0xf0>
    2a34:	9a 83       	std	Y+2, r25	; 0x02
    2a36:	89 83       	std	Y+1, r24	; 0x01
		 _delay_ms(2000);
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2a38:	eb e2       	ldi	r30, 0x2B	; 43
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	88 23       	and	r24, r24
    2a40:	dc f7       	brge	.-10     	; 0x2a38 <UART_recieveByte+0xf8>
	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2a42:	ec e2       	ldi	r30, 0x2C	; 44
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
}
    2a48:	2e 96       	adiw	r28, 0x0e	; 14
    2a4a:	0f b6       	in	r0, 0x3f	; 63
    2a4c:	f8 94       	cli
    2a4e:	de bf       	out	0x3e, r29	; 62
    2a50:	0f be       	out	0x3f, r0	; 63
    2a52:	cd bf       	out	0x3d, r28	; 61
    2a54:	cf 91       	pop	r28
    2a56:	df 91       	pop	r29
    2a58:	08 95       	ret

00002a5a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2a5a:	df 93       	push	r29
    2a5c:	cf 93       	push	r28
    2a5e:	00 d0       	rcall	.+0      	; 0x2a60 <UART_sendString+0x6>
    2a60:	0f 92       	push	r0
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
    2a66:	9b 83       	std	Y+3, r25	; 0x03
    2a68:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a6a:	19 82       	std	Y+1, r1	; 0x01
    2a6c:	0e c0       	rjmp	.+28     	; 0x2a8a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	28 2f       	mov	r18, r24
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	8a 81       	ldd	r24, Y+2	; 0x02
    2a76:	9b 81       	ldd	r25, Y+3	; 0x03
    2a78:	fc 01       	movw	r30, r24
    2a7a:	e2 0f       	add	r30, r18
    2a7c:	f3 1f       	adc	r31, r19
    2a7e:	80 81       	ld	r24, Z
    2a80:	0e 94 89 14 	call	0x2912	; 0x2912 <UART_sendByte>
		i++;
    2a84:	89 81       	ldd	r24, Y+1	; 0x01
    2a86:	8f 5f       	subi	r24, 0xFF	; 255
    2a88:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	28 2f       	mov	r18, r24
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	8a 81       	ldd	r24, Y+2	; 0x02
    2a92:	9b 81       	ldd	r25, Y+3	; 0x03
    2a94:	fc 01       	movw	r30, r24
    2a96:	e2 0f       	add	r30, r18
    2a98:	f3 1f       	adc	r31, r19
    2a9a:	80 81       	ld	r24, Z
    2a9c:	88 23       	and	r24, r24
    2a9e:	39 f7       	brne	.-50     	; 0x2a6e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2aa0:	0f 90       	pop	r0
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	cf 91       	pop	r28
    2aa8:	df 91       	pop	r29
    2aaa:	08 95       	ret

00002aac <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2aac:	0f 93       	push	r16
    2aae:	1f 93       	push	r17
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	00 d0       	rcall	.+0      	; 0x2ab6 <UART_receiveString+0xa>
    2ab6:	0f 92       	push	r0
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
    2abc:	9b 83       	std	Y+3, r25	; 0x03
    2abe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ac0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2ac2:	89 81       	ldd	r24, Y+1	; 0x01
    2ac4:	28 2f       	mov	r18, r24
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aca:	9b 81       	ldd	r25, Y+3	; 0x03
    2acc:	8c 01       	movw	r16, r24
    2ace:	02 0f       	add	r16, r18
    2ad0:	13 1f       	adc	r17, r19
    2ad2:	0e 94 a0 14 	call	0x2940	; 0x2940 <UART_recieveByte>
    2ad6:	f8 01       	movw	r30, r16
    2ad8:	80 83       	st	Z, r24
    2ada:	0f c0       	rjmp	.+30     	; 0x2afa <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2adc:	89 81       	ldd	r24, Y+1	; 0x01
    2ade:	8f 5f       	subi	r24, 0xFF	; 255
    2ae0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2ae2:	89 81       	ldd	r24, Y+1	; 0x01
    2ae4:	28 2f       	mov	r18, r24
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aea:	9b 81       	ldd	r25, Y+3	; 0x03
    2aec:	8c 01       	movw	r16, r24
    2aee:	02 0f       	add	r16, r18
    2af0:	13 1f       	adc	r17, r19
    2af2:	0e 94 a0 14 	call	0x2940	; 0x2940 <UART_recieveByte>
    2af6:	f8 01       	movw	r30, r16
    2af8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2afa:	89 81       	ldd	r24, Y+1	; 0x01
    2afc:	28 2f       	mov	r18, r24
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	8a 81       	ldd	r24, Y+2	; 0x02
    2b02:	9b 81       	ldd	r25, Y+3	; 0x03
    2b04:	fc 01       	movw	r30, r24
    2b06:	e2 0f       	add	r30, r18
    2b08:	f3 1f       	adc	r31, r19
    2b0a:	80 81       	ld	r24, Z
    2b0c:	83 32       	cpi	r24, 0x23	; 35
    2b0e:	31 f7       	brne	.-52     	; 0x2adc <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2b10:	89 81       	ldd	r24, Y+1	; 0x01
    2b12:	28 2f       	mov	r18, r24
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	8a 81       	ldd	r24, Y+2	; 0x02
    2b18:	9b 81       	ldd	r25, Y+3	; 0x03
    2b1a:	fc 01       	movw	r30, r24
    2b1c:	e2 0f       	add	r30, r18
    2b1e:	f3 1f       	adc	r31, r19
    2b20:	10 82       	st	Z, r1
}
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	cf 91       	pop	r28
    2b2a:	df 91       	pop	r29
    2b2c:	1f 91       	pop	r17
    2b2e:	0f 91       	pop	r16
    2b30:	08 95       	ret

00002b32 <__udivmodsi4>:
    2b32:	a1 e2       	ldi	r26, 0x21	; 33
    2b34:	1a 2e       	mov	r1, r26
    2b36:	aa 1b       	sub	r26, r26
    2b38:	bb 1b       	sub	r27, r27
    2b3a:	fd 01       	movw	r30, r26
    2b3c:	0d c0       	rjmp	.+26     	; 0x2b58 <__udivmodsi4_ep>

00002b3e <__udivmodsi4_loop>:
    2b3e:	aa 1f       	adc	r26, r26
    2b40:	bb 1f       	adc	r27, r27
    2b42:	ee 1f       	adc	r30, r30
    2b44:	ff 1f       	adc	r31, r31
    2b46:	a2 17       	cp	r26, r18
    2b48:	b3 07       	cpc	r27, r19
    2b4a:	e4 07       	cpc	r30, r20
    2b4c:	f5 07       	cpc	r31, r21
    2b4e:	20 f0       	brcs	.+8      	; 0x2b58 <__udivmodsi4_ep>
    2b50:	a2 1b       	sub	r26, r18
    2b52:	b3 0b       	sbc	r27, r19
    2b54:	e4 0b       	sbc	r30, r20
    2b56:	f5 0b       	sbc	r31, r21

00002b58 <__udivmodsi4_ep>:
    2b58:	66 1f       	adc	r22, r22
    2b5a:	77 1f       	adc	r23, r23
    2b5c:	88 1f       	adc	r24, r24
    2b5e:	99 1f       	adc	r25, r25
    2b60:	1a 94       	dec	r1
    2b62:	69 f7       	brne	.-38     	; 0x2b3e <__udivmodsi4_loop>
    2b64:	60 95       	com	r22
    2b66:	70 95       	com	r23
    2b68:	80 95       	com	r24
    2b6a:	90 95       	com	r25
    2b6c:	9b 01       	movw	r18, r22
    2b6e:	ac 01       	movw	r20, r24
    2b70:	bd 01       	movw	r22, r26
    2b72:	cf 01       	movw	r24, r30
    2b74:	08 95       	ret

00002b76 <__prologue_saves__>:
    2b76:	2f 92       	push	r2
    2b78:	3f 92       	push	r3
    2b7a:	4f 92       	push	r4
    2b7c:	5f 92       	push	r5
    2b7e:	6f 92       	push	r6
    2b80:	7f 92       	push	r7
    2b82:	8f 92       	push	r8
    2b84:	9f 92       	push	r9
    2b86:	af 92       	push	r10
    2b88:	bf 92       	push	r11
    2b8a:	cf 92       	push	r12
    2b8c:	df 92       	push	r13
    2b8e:	ef 92       	push	r14
    2b90:	ff 92       	push	r15
    2b92:	0f 93       	push	r16
    2b94:	1f 93       	push	r17
    2b96:	cf 93       	push	r28
    2b98:	df 93       	push	r29
    2b9a:	cd b7       	in	r28, 0x3d	; 61
    2b9c:	de b7       	in	r29, 0x3e	; 62
    2b9e:	ca 1b       	sub	r28, r26
    2ba0:	db 0b       	sbc	r29, r27
    2ba2:	0f b6       	in	r0, 0x3f	; 63
    2ba4:	f8 94       	cli
    2ba6:	de bf       	out	0x3e, r29	; 62
    2ba8:	0f be       	out	0x3f, r0	; 63
    2baa:	cd bf       	out	0x3d, r28	; 61
    2bac:	09 94       	ijmp

00002bae <__epilogue_restores__>:
    2bae:	2a 88       	ldd	r2, Y+18	; 0x12
    2bb0:	39 88       	ldd	r3, Y+17	; 0x11
    2bb2:	48 88       	ldd	r4, Y+16	; 0x10
    2bb4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bb6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bb8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bba:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bbc:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bbe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bc0:	b9 84       	ldd	r11, Y+9	; 0x09
    2bc2:	c8 84       	ldd	r12, Y+8	; 0x08
    2bc4:	df 80       	ldd	r13, Y+7	; 0x07
    2bc6:	ee 80       	ldd	r14, Y+6	; 0x06
    2bc8:	fd 80       	ldd	r15, Y+5	; 0x05
    2bca:	0c 81       	ldd	r16, Y+4	; 0x04
    2bcc:	1b 81       	ldd	r17, Y+3	; 0x03
    2bce:	aa 81       	ldd	r26, Y+2	; 0x02
    2bd0:	b9 81       	ldd	r27, Y+1	; 0x01
    2bd2:	ce 0f       	add	r28, r30
    2bd4:	d1 1d       	adc	r29, r1
    2bd6:	0f b6       	in	r0, 0x3f	; 63
    2bd8:	f8 94       	cli
    2bda:	de bf       	out	0x3e, r29	; 62
    2bdc:	0f be       	out	0x3f, r0	; 63
    2bde:	cd bf       	out	0x3d, r28	; 61
    2be0:	ed 01       	movw	r28, r26
    2be2:	08 95       	ret

00002be4 <itoa>:
    2be4:	fb 01       	movw	r30, r22
    2be6:	9f 01       	movw	r18, r30
    2be8:	e8 94       	clt
    2bea:	42 30       	cpi	r20, 0x02	; 2
    2bec:	c4 f0       	brlt	.+48     	; 0x2c1e <itoa+0x3a>
    2bee:	45 32       	cpi	r20, 0x25	; 37
    2bf0:	b4 f4       	brge	.+44     	; 0x2c1e <itoa+0x3a>
    2bf2:	4a 30       	cpi	r20, 0x0A	; 10
    2bf4:	29 f4       	brne	.+10     	; 0x2c00 <itoa+0x1c>
    2bf6:	97 fb       	bst	r25, 7
    2bf8:	1e f4       	brtc	.+6      	; 0x2c00 <itoa+0x1c>
    2bfa:	90 95       	com	r25
    2bfc:	81 95       	neg	r24
    2bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    2c00:	64 2f       	mov	r22, r20
    2c02:	77 27       	eor	r23, r23
    2c04:	0e 94 23 16 	call	0x2c46	; 0x2c46 <__udivmodhi4>
    2c08:	80 5d       	subi	r24, 0xD0	; 208
    2c0a:	8a 33       	cpi	r24, 0x3A	; 58
    2c0c:	0c f0       	brlt	.+2      	; 0x2c10 <itoa+0x2c>
    2c0e:	89 5d       	subi	r24, 0xD9	; 217
    2c10:	81 93       	st	Z+, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	00 97       	sbiw	r24, 0x00	; 0
    2c16:	a1 f7       	brne	.-24     	; 0x2c00 <itoa+0x1c>
    2c18:	16 f4       	brtc	.+4      	; 0x2c1e <itoa+0x3a>
    2c1a:	5d e2       	ldi	r21, 0x2D	; 45
    2c1c:	51 93       	st	Z+, r21
    2c1e:	10 82       	st	Z, r1
    2c20:	c9 01       	movw	r24, r18
    2c22:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <strrev>

00002c26 <strrev>:
    2c26:	dc 01       	movw	r26, r24
    2c28:	fc 01       	movw	r30, r24
    2c2a:	67 2f       	mov	r22, r23
    2c2c:	71 91       	ld	r23, Z+
    2c2e:	77 23       	and	r23, r23
    2c30:	e1 f7       	brne	.-8      	; 0x2c2a <strrev+0x4>
    2c32:	32 97       	sbiw	r30, 0x02	; 2
    2c34:	04 c0       	rjmp	.+8      	; 0x2c3e <strrev+0x18>
    2c36:	7c 91       	ld	r23, X
    2c38:	6d 93       	st	X+, r22
    2c3a:	70 83       	st	Z, r23
    2c3c:	62 91       	ld	r22, -Z
    2c3e:	ae 17       	cp	r26, r30
    2c40:	bf 07       	cpc	r27, r31
    2c42:	c8 f3       	brcs	.-14     	; 0x2c36 <strrev+0x10>
    2c44:	08 95       	ret

00002c46 <__udivmodhi4>:
    2c46:	aa 1b       	sub	r26, r26
    2c48:	bb 1b       	sub	r27, r27
    2c4a:	51 e1       	ldi	r21, 0x11	; 17
    2c4c:	07 c0       	rjmp	.+14     	; 0x2c5c <__udivmodhi4_ep>

00002c4e <__udivmodhi4_loop>:
    2c4e:	aa 1f       	adc	r26, r26
    2c50:	bb 1f       	adc	r27, r27
    2c52:	a6 17       	cp	r26, r22
    2c54:	b7 07       	cpc	r27, r23
    2c56:	10 f0       	brcs	.+4      	; 0x2c5c <__udivmodhi4_ep>
    2c58:	a6 1b       	sub	r26, r22
    2c5a:	b7 0b       	sbc	r27, r23

00002c5c <__udivmodhi4_ep>:
    2c5c:	88 1f       	adc	r24, r24
    2c5e:	99 1f       	adc	r25, r25
    2c60:	5a 95       	dec	r21
    2c62:	a9 f7       	brne	.-22     	; 0x2c4e <__udivmodhi4_loop>
    2c64:	80 95       	com	r24
    2c66:	90 95       	com	r25
    2c68:	bc 01       	movw	r22, r24
    2c6a:	cd 01       	movw	r24, r26
    2c6c:	08 95       	ret

00002c6e <_exit>:
    2c6e:	f8 94       	cli

00002c70 <__stop_program>:
    2c70:	ff cf       	rjmp	.-2      	; 0x2c70 <__stop_program>
